
const string dialog_title = "StarCraft 2 Balance Patch Randomizer Beta https://discord.gg/sUzjZ3RPhw";
int dialog_start;
int seed_editbox;
int num_factions_editbox;
int num_bans_editbox;
int changes_per_faction_editbox;
int changes_per_unit_editbox;
int min_percent_editbox;
int max_percent_editbox;
int min_workers_editbox;
int max_workers_editbox;
int buffs_nerfs_editbox;
int crowd_control_checkbox;
int dialog_bans;
int changes_list;
int dialog_wait;
int dialog_pick_faction;
int ban_button;
int pick_button;
int factions_dropdown;

text[128] info_list;
int info_list_len = 0;

void info_list_general(int start) {
    int i;
    int len;
    int player;
    int faction;
    playergroup players;
    text t;

    info_list[start] = StringToText("Seed: "+IntToString(seed)+", Bans: "+IntToString(num_bans)+", Factions: "+IntToString(num_factions));
    info_list[start+1] = StringToText(IntToString(changes_per_faction)+" changes per faction");
    info_list[start+2] = StringToText(FixedToString(min_percent,1)+"% minimum, "+FixedToString(max_percent,1)+"% maximum");

    start += 3;
    players = PlayerGroupActive();
    len = PlayerGroupCount(players);
    // show list of bans
    for( i=1; i<=len; i+=1 ) {
        player = PlayerGroupPlayer(players, i);
        for( faction=0; faction < 4*max_factions; faction+=1 ) {
            if( players_bans[get_player_faction_ban_slot(player, faction)] ) {
                t = PlayerName(player) + StringToText(" banned " + race_changes[faction].name);
                info_list[start] = t;
                start += 1;
            }
        }
    }
    // show list of picks or races
    for( i=1; i<=len; i+=1 ) {
        player = PlayerGroupPlayer(players, i);
        t = PlayerName(player) + StringToText(" is ");

        faction = players_picks[player];
        if( faction > 0 ) {
            t += StringToText(race_changes[faction].name);
        }
        else if(PlayerRace(player) == "Terr") {
            t += StringToText("Terran");
        } else if(PlayerRace(player) == "Prot") {
            t += StringToText("Protoss");
        } else if(PlayerRace(player) == "Zerg") {
            t += StringToText("Zerg");
        } else {
            t += StringToText("Unknown (please report this bug)");
        }
        info_list[start] = t;
        start += 1;
    }
    info_list[start] = StringToText("");
    info_list_len = start;
}


void show_changes(int list, playergroup players, int race) {
    int i;

    DialogControlRemoveAllItems(list, players);

    // TODO: zerg buildings count the cost of the drone...
    if(race < 0) {
        for( i=0; i<info_list_len; i+=1 ) {
            DialogControlAddItem(list, players, info_list[i] );
        }
        return;
    }

    for( i=0; i<race_changes[race].len; i+=1 ) {
        DialogControlAddItem(list, players, change_to_text(race_changes[race].changes[i]) );
    }
}


bool ban_button_click(bool testConds, bool runActions) {
    // TODO: show counter for remaining bans
    int selected;
    int player;

    player = EventPlayer();
    selected = get_selected_faction(player, factions_dropdown);

    if( players_bans[get_player_faction_ban_slot(player, selected)] ) {
        players_bans[get_player_faction_ban_slot(player, selected)] = false;
        info_t( PlayerName(player) + StringToText(" clicked unban for " + race_changes[selected].name) );
        libNtve_gf_SetDialogItemText(ban_button, StringToText("Ban"), PlayerGroupSingle(player) );
        libNtve_gf_SetDialogItemTooltip(ban_button, StringToText("Ban"), PlayerGroupSingle(player) );
    } else {
        players_bans[get_player_faction_ban_slot(player, selected)] = true;
        info_t( PlayerName(player) + StringToText(" clicked ban for " + race_changes[selected].name) );
        libNtve_gf_SetDialogItemText(ban_button, StringToText("Unban"), PlayerGroupSingle(player) );
        libNtve_gf_SetDialogItemTooltip(ban_button, StringToText("Unban"), PlayerGroupSingle(player) );
    }

    return true;
}


bool pick_button_click(bool testConds, bool runActions) {
    int selected;
    int player;

    player = EventPlayer();
    selected = get_selected_faction(player, factions_dropdown);

    players_picks[player] = selected;
    info_t( PlayerName(player) + StringToText(" clicked pick for " + race_changes[selected].name) );
    DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), false);
    DialogControlSetEnabled(submit_button, PlayerGroupSingle(player), true);

    return true;
}


void pick_faction_dropdown(int player, int selected, int race) {
    if(race <= no_race) {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), false);
        return;
    }

    if( faction_banned_for_player(player, selected) ) {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), false);
        return;
    }

    if( players_picks[player] == selected ) {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), false);
        return;
    }

    if( race == terran && PlayerRace(player) == "Terr" ) {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), true);
    } else if( race == protoss && PlayerRace(player) == "Prot" ) {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), true);
    } else if( race == zerg && PlayerRace(player) == "Zerg" ) {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), true);
    }
    else {
        DialogControlSetEnabled(pick_button, PlayerGroupSingle(player), false);
    }
}


void ban_faction_dropdown(int player, int selected, int race) {
    if( race <= no_race ) {
        DialogControlSetEnabled(ban_button, PlayerGroupSingle(player), false);
        return;
    }

    if( players_bans[get_player_faction_ban_slot(player, selected)] ) {
        libNtve_gf_SetDialogItemText(ban_button, StringToText("Unban"), PlayerGroupSingle(player) );
        libNtve_gf_SetDialogItemTooltip(ban_button, StringToText("Unban"), PlayerGroupSingle(player) );
        DialogControlSetEnabled(ban_button, PlayerGroupSingle(player), true);
        return;
    }
    else {
        libNtve_gf_SetDialogItemText(ban_button, StringToText("Ban"), PlayerGroupSingle(player) );
        libNtve_gf_SetDialogItemTooltip(ban_button, StringToText("Ban"), PlayerGroupSingle(player) );
    }

    if( get_player_num_bans(player) >= num_bans ) {
        DialogControlSetEnabled(ban_button, PlayerGroupSingle(player), false);
    } else {
        DialogControlSetEnabled(ban_button, PlayerGroupSingle(player), true);
    }
}


bool dropdown_factions(bool testConds, bool runActions) {
    int selected;
    int race;
    int dropdown;
    int dialog;
    int player;

    dropdown = EventDialogControl();
    dialog = DialogControlGetDialog(dropdown);
    player = EventPlayer();
    selected = get_selected_faction(player, dropdown);
    race = get_race_from_selected(selected);
    show_changes(changes_list, PlayerGroupSingle(EventPlayer()), selected );

    if( dialog == dialog_pick_faction ) {
        pick_faction_dropdown(player, selected, race);
    }
    else if( dialog == dialog_bans ) {
        ban_faction_dropdown(player, selected, race);
    }
    return true;
}


int get_default_faction(int player) {
    int race;
    string s_race;
    int faction;
    bool banned;
    int i;
    int num;

    s_race = PlayerRace(player);
    if( s_race == "Terr" ) {
        race = terran;
    } else if( s_race == "Prot" ) {
        race = protoss;
    } else if( s_race == "Zerg" ) {
        race = zerg;
    } else {
        err("unknown PlayerRace("+IntToString(player)+" == "+s_race);
        return 0;
    }

    for(i=0; i<num_factions; i+=1) {
        faction = i*4 + race;
        if( ! faction_banned_for_player(player, faction) ) {
            num+=1;
        }
    }

    num = rngi(0, num-1);
    for(i=0; i<num_factions; i+=1) {
        faction = i*4 + race;
        if( ! faction_banned_for_player(player, faction) ) {
            if(num == 0) {
                return faction;
            }
            num-=1;
        }
    }

    // default to Faction 1
    return race;
}


void apply_changes_player(int player) {
    int faction;

    info_t(StringToText("apply_changes_player ") + PlayerName(player) );
    faction = players_picks[player];

    if( faction == 0 ) {
        faction = get_default_faction(player);
        players_picks[player] = faction;
        info_t( PlayerName(player) + StringToText(" was assigned " + race_changes[faction].name) );
    }
    else {
        info_t( PlayerName(player) + StringToText(" chose " + race_changes[faction].name) );
    }
    apply_changes(faction, player);
    info_t(StringToText("apply_changes_player done for ") + PlayerName(player) );
}


bool start_game(bool testConds, bool runActions) {
    int i;

    info("start_game");
    TriggerDestroy(dialog_timeout);
    if(dialog_pick_faction) {
        DialogSetVisible(dialog_pick_faction, PlayerGroupAll(), false);
        DialogDestroy(dialog_pick_faction);
    }

    libNtve_gf_HideGameUI( true, PlayerGroupAll() );
    for( i=1; i<16; i+=1 ) {
        if(PlayerIsActive(i)) {
            CameraLockInput(i, false);
            MeleeSetOption(i, c_meleeOptionStalemate, true);
        }
    }
    GameSetGlobalTimeScale(1);
    StartCrowdControl();
    return true;
}


void apply_all_changes() {
    int i;
    int len;
    playergroup players;

    players = PlayerGroupActive();
    len = PlayerGroupCount(players);
    info("apply_all_changes, with "+IntToString(len)+" active players");
    for( i=1; i<=len; i+=1 ) {
        apply_changes_player( PlayerGroupPlayer(players, i) );
    }

    TipAlertPanelClear(PlayerGroupAll());
    create_general_tips();
}


void start_review() {
    int i;
    int len;
    playergroup players;

    apply_all_changes();

    info_list[0] = StringToText("Select a race/faction to see the changes");
    info_list[1] = StringToText("Make sure to also read the General Changes");
    info_list[2] = StringToText("You have 1 minute to review");
    info_list_general(3);
    DialogControlSelectItem(factions_dropdown, PlayerGroupAll(), 2);// ensure new selected item
    DialogControlSelectItem(factions_dropdown, PlayerGroupAll(), 1);

    players = PlayerGroupActive();
    DialogControlSetVisible(pick_button, players, false);
    DialogControlDestroy(submit_button);
    create_continue_button(dialog_pick_faction, "Start Game", "start_game");
    
    TriggerDestroy(dialog_timeout);
    dialog_timeout = TriggerCreate("start_game");
    TriggerAddEventTimeElapsed( dialog_timeout, 60, c_timeReal );
}


bool review_timeout(bool testConds, bool runActions) {
    info("review_timeout");
    clear_waiting();
    start_review();
    return true;
}


bool review_button_pressed(bool testConds, bool runActions) {
    int i;
    int faction;
    int player;
    int dialog;
    int button;

    player = EventPlayer();
    info_t(StringToText("review_button_pressed ")+PlayerName(player));
    button = EventDialogControl();
    dialog = DialogControlGetDialog(button);

    DialogControlSetVisible(pick_button, PlayerGroupSingle(player), false);

    if( is_waiting(player, button) ) {
        return true;
    }

    start_review();
    return true;
}


int create_dialog_pick_faction() {
    playergroup players;
    int button;
    int timeout_minutes = 3;

    info("create_dialog_pick_faction");
    if( num_factions <= 1 ) {
        dialog_pick_faction = 0;
        apply_all_changes();
        start_game(false, true);
        return 0;
    }

    if(rando_mode=="competitive") {
        timeout_minutes = 5;
    }

    players = PlayerGroupAll();

    dialog_pick_faction = DialogCreate(500, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(dialog_pick_faction, StringToText(dialog_title) );
    DialogSetFullscreen(dialog_pick_faction, true);

    create_continue_button(dialog_pick_faction, "Continue To Review", "review_button_pressed");
    TriggerDestroy(enable_button_trigger);
    libNtve_gf_SetDialogItemTooltip(submit_button, StringToText("Pick a faction"), PlayerGroupAll());
    DialogControlSetEnabled(submit_button, players, false);

    info_list[0] = StringToText("Select a race/faction to see the changes");
    info_list[1] = StringToText("Click on the Pick button to select that faction to play as");
    info_list[2] = StringToText("Make sure to also read the General Changes");
    info_list[3] = StringToText("You have "+IntToString(timeout_minutes)+" minutes to choose");
    info_list[4] = StringToText("You are allowed to change your choice while this menu is open");
    info_list_general(5);

    changes_list = create_changes_list(dialog_pick_faction);

    factions_dropdown = create_factions_dropdown(dialog_pick_faction, changes_list, "dropdown_factions");

    pick_button = create_ban_pick_button(dialog_pick_faction, changes_list, "Pick", "pick_button_click");
    DialogControlSetEnabled(pick_button, players, false);
    
    if( num_factions <= 1 ) {
        start_review();
    }

    TriggerDestroy(dialog_timeout);
    dialog_timeout = TriggerCreate("review_timeout");

    TriggerAddEventTimeElapsed( dialog_timeout, timeout_minutes*60, c_timeReal );

    DialogSetVisible(dialog_pick_faction, players, true);

    return dialog_pick_faction;
}


void start_pick_factions() {
    int player;
    int faction;
    int i;
    int len;
    playergroup players;

    info("start_pick_factions");
    players = PlayerGroupActive();
    len = PlayerGroupCount(players);
    for( i=1; i<=len; i+=1 ) {
        player = PlayerGroupPlayer(players, i);
        for( faction=0; faction < 4*max_factions; faction+=1 ) {
            if( players_bans[get_player_faction_ban_slot(player, faction)] ) {
                info_t( PlayerName(player) + StringToText(" banned " + race_changes[faction].name) );
            }
        }
    }

    clear_waiting();
    if(dialog_bans) {
        DialogSetVisible(dialog_bans, PlayerGroupAll(), false);
        DialogDestroy(dialog_bans);
    }

    create_dialog_pick_faction();
}


bool ban_factions_timeout(bool testConds, bool runActions) {
    info("ban_factions_timeout");
    start_pick_factions();
    return true;
}


bool bans_done_button_pressed(bool testConds, bool runActions) {
    int i;
    int player;
    int num_players_waiting;
    playergroup players;
    int button;

    player = EventPlayer();
    info_t(StringToText("bans_done_button_pressed ")+PlayerName(player));

    DialogControlSetVisible(ban_button, PlayerGroupSingle(player), false);

    if( is_waiting(player, EventDialogControl()) ) {
        return true;
    }

    start_pick_factions();

    return true;
}


int create_dialog_bans() {
    int width;
    int height;
    int timeout_minutes = 5;
    //int race;
    playergroup players;
    int button;

    info("create_dialog_bans");
    players = PlayerGroupAll();

    // TODO: bans remaining 2 / 3
    // timer

    if(rando_mode=="competitive") {
        timeout_minutes = 10;
    }
    dialog_bans = DialogCreate(500, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(dialog_bans, StringToText(dialog_title) );
    DialogSetFullscreen(dialog_bans, true);

    // TODO: how to get screen size? these seem to return 500, 500 even though I set the dialog to fullscreen
    width = DialogGetWidth(dialog_bans);
    height = DialogGetHeight(dialog_bans);

    info_list[0] = StringToText("Select a race/faction to see the changes");
    info_list[1] = StringToText("Click on the Ban button to disallow your opponents from picking that faction");
    info_list[2] = StringToText("Make sure to also read the General Changes");
    info_list[3] = StringToText("You have "+IntToString(timeout_minutes)+" minutes to choose bans");
    info_list[4] = StringToText("You are allowed to change your bans by clicking on Unban");
    info_list_general(5);

    changes_list = create_changes_list(dialog_bans);

    factions_dropdown = create_factions_dropdown(dialog_bans, changes_list, "dropdown_factions");

    ban_button = create_ban_pick_button(dialog_bans, changes_list, "Ban", "ban_button_click");
    DialogControlSetEnabled(ban_button, players, false);

    create_continue_button(dialog_bans, "Continue", "bans_done_button_pressed");

    TriggerDestroy(dialog_timeout);
    dialog_timeout = TriggerCreate("ban_factions_timeout");
    TriggerAddEventTimeElapsed( dialog_timeout, timeout_minutes*60, c_timeReal );

    DialogSetVisible(dialog_bans, players, true);

    return dialog_bans;
}


bool start_rando_button_pressed(bool testConds, bool runActions) {
    string sseed;
    string snum_factions;
    string snum_bans;
    string schanges_per_faction;
    //string schanges_per_unit;
    string smin_percent;
    string smax_percent;
    string smin_starting_workers;
    string smax_starting_workers;
    string sbuffs_nerfs;
    int loading_screen;
    int loading_text;
    int num_players;
    int i;

    info("start_rando_button_pressed");
    TriggerDestroy(dialog_timeout);

    for( i=1; i<16; i+=1 ) {
        if(PlayerIsActive(i)) {
            CameraLockInput(i, true);
            MeleeSetOption(i, c_meleeOptionStalemate, false);
        }
    }

    sseed = libNtve_gf_DialogItemEditValue(seed_editbox, default_player);
    if( sseed != "" ) {
        seed = StringToInt(sseed);
    }

    num_players = PlayerGroupCount(PlayerGroupActive());
    snum_factions = libNtve_gf_DialogItemEditValue(num_factions_editbox, default_player);
    if( snum_factions != "" ) {
        num_factions = StringToInt(snum_factions);
    }
    if( num_factions > max_factions ) {
        num_factions = max_factions;
    }
    if( num_factions < 1 ) {
        num_factions = 1;
    }

    snum_bans = libNtve_gf_DialogItemEditValue(num_bans_editbox, default_player);
    if( snum_bans != "" ) {
        num_bans = StringToInt(snum_bans);
    }
    num_bans = limit_num_bans(num_players, num_factions, num_bans);

    schanges_per_faction = libNtve_gf_DialogItemEditValue(changes_per_faction_editbox, default_player);
    if( schanges_per_faction != "" ) {
        changes_per_faction = StringToInt(schanges_per_faction);
        if( changes_per_faction > 100 ) {
            changes_per_faction = 100;
        }
        if( changes_per_faction < 1 ) {
            changes_per_faction = 1;
        }
    }

    smin_percent = libNtve_gf_DialogItemEditValue(min_percent_editbox, default_player);
    if( smin_percent != "" ) {
        min_percent = StringToFixed(smin_percent);
    }

    smax_percent = libNtve_gf_DialogItemEditValue(max_percent_editbox, default_player);
    if( smax_percent != "" ) {
        max_percent = StringToFixed(smax_percent);
    }

    smin_starting_workers = libNtve_gf_DialogItemEditValue(min_workers_editbox, default_player);
    if( smin_starting_workers != "" ) {
        min_starting_workers = StringToInt(smin_starting_workers);
    }
    min_starting_workers = libNtve_gf_ArithmeticIntClamp(min_starting_workers, 1, 16);
    smax_starting_workers = libNtve_gf_DialogItemEditValue(max_workers_editbox, default_player);
    if( smax_starting_workers != "" ) {
        max_starting_workers = StringToInt(smax_starting_workers);
    }
    max_starting_workers = libNtve_gf_ArithmeticIntClamp(max_starting_workers, 1, 16);
    min_starting_workers = MinI(min_starting_workers, max_starting_workers);

    sbuffs_nerfs = libNtve_gf_DialogItemEditValue(buffs_nerfs_editbox, default_player);
    if( sbuffs_nerfs != "" ) {
        buffs_nerfs = StringToFixed(sbuffs_nerfs);
    }
    buffs_nerfs = libNtve_gf_ArithmeticRealClamp(buffs_nerfs, 0, 100);

    crowd_control_enabled = libNtve_gf_DialogItemIsChecked(crowd_control_checkbox, default_player);

    DialogSetVisible(dialog_start, PlayerGroupAll(), false);
    DialogDestroy(dialog_start);

    DialogSetVisible(dialog_wait, PlayerGroupAll(), false);
    DialogDestroy(dialog_wait);

    loading_screen = DialogCreate(500, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(loading_screen, StringToText(dialog_title) );
    DialogSetFullscreen(loading_screen, true);

    loading_text = DialogControlCreate(loading_screen, c_triggerControlTypeLabel);
    DialogControlSetSize(loading_text, PlayerGroupAll(), 300, 300);
    DialogControlSetPosition(loading_text, PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText( loading_text, StringToText("Please wait while randomizing..."), PlayerGroupAll() );
    libNtve_gf_SetDialogItemTooltip( loading_text, StringToText("Please wait while randomizing..."), PlayerGroupAll() );

    DialogSetVisible(loading_screen, PlayerGroupAll(), true);

    do_rando();

    DialogSetVisible(loading_screen, PlayerGroupAll(), false);
    DialogDestroy(loading_screen);

    if( num_bans > 0 ) {
        create_dialog_bans();
    } else {
        start_pick_factions();
    }
    return true;
}


int create_dialog_settings() {
    playergroup players;
    int num_players;

    info("create_dialog_settings");
    players = PlayerGroupSingle(default_player);

    num_players = PlayerGroupCount(PlayerGroupActive());
    // TODO: timeouts for dialogs with countdown

    dialog_start = DialogCreate(500, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(dialog_start, StringToText(dialog_title) );
    DialogSetFullscreen(dialog_start, true);

    seed_editbox = create_edit_box_with_label(dialog_start, players, IntToString(seed), "Seed: ", "The seed used for randomization. Reuse a seed to practice it!", 0);
    num_factions_editbox = create_edit_box_with_label(dialog_start, players, IntToString(num_factions), "Factions: ", "How many factions to generate for each race", 1);
    num_bans_editbox = create_edit_box_with_label(dialog_start, players, IntToString(num_bans), "Bans: ", "How many bans each player can use", 2);

    changes_per_faction_editbox = create_edit_box_with_label(dialog_start, players, IntToString(changes_per_faction), "Changes per faction: ", "How many things to change for each faction", 3);
    //changes_per_unit_editbox = create_edit_box_with_label(dialog_start, players, IntToString(changes_per_unit), "Changes per unit: ", "Maximum number of things to change for each unit", 4);

    min_percent_editbox = create_edit_box_with_label(dialog_start, players, FixedToString(min_percent,0), "Minimum Value %: ", "The lowest each stat can be changed to", 4);
    max_percent_editbox = create_edit_box_with_label(dialog_start, players, FixedToString(max_percent,0), "Maximum Value %: ", "The highest each stat can be changed to", 5);

    min_workers_editbox = create_edit_box_with_label(dialog_start, players, IntToString(min_starting_workers), "Minimum Starting Workers: ", "The lowest for starting workers", 6);
    max_workers_editbox = create_edit_box_with_label(dialog_start, players, IntToString(max_starting_workers), "Maximum Starting Workers: ", "The highest for starting workers", 7);

    buffs_nerfs_editbox = create_edit_box_with_label(dialog_start, players, FixedToString(buffs_nerfs, 0), "Buffs vs nerfs %: ", "The chances that each change will be a buff instead of a nerf", 8);

    crowd_control_checkbox = create_checkbox_with_label(dialog_start, players, false, "Enable Crowd Control", "Allow your viewers on Twitch to mess with the game!", 9);

    create_continue_button(dialog_start, "Continue", "start_rando_button_pressed");

    dialog_timeout = TriggerCreate("start_rando_button_pressed");
    if(rando_mode=="competitive") {// TODO: add a quick play mode
        start_rando_button_pressed(true, true);
    } else {
        TriggerAddEventTimeElapsed( dialog_timeout, 60, c_timeReal );
        DialogSetVisible(dialog_start, players, true);
    }

    return dialog_start;
}


int create_dialog_wait_settings() {
    playergroup players;
    
    info("create_dialog_wait_settings");
    players = PlayerGroupCopy(PlayerGroupAll());// not sure if it needs to be copied
    PlayerGroupRemove(players, default_player);

    dialog_wait = DialogCreate(500, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(dialog_wait, StringToText(dialog_title) );
    DialogSetFullscreen(dialog_wait, true);

    create_label(dialog_wait, players, "Waiting for host to choose settings...", "", 0);
    create_label(dialog_wait, players, "StarCraft 2 Balance Patch Randomizer is still early in development, some bugs are expected.", "", 1);
    create_label(dialog_wait, players, "After the host chooses the settings, each race will have some randomized factions generated for them.", "", 2);
    //create_label(dialog_wait, players, "If the host chooses to allow bans, make sure to ban the factions that you think look too strong!", "", 3);
    create_label(dialog_wait, players, "Then you will pick which faction you get to play as, so pick the one you think looks the strongest.", "", 3);
    create_label(dialog_wait, players, "During the game, you can press F12 to review the changes again.", "", 4);

    DialogSetVisible(dialog_wait, players, true);
    return dialog_wait;
}


void create_dialog_start() {
    int i;

    info("create_dialog_start");
    for( i=1; i<16; i+=1 ) {
        if(PlayerIsActive(i)) {
            CameraLockInput(i, true);
        }
    }

    GameSetGlobalTimeScale(0);
    libNtve_gf_HideGameUI( false, PlayerGroupAll() );

    create_dialog_settings();
    create_dialog_wait_settings();
}
