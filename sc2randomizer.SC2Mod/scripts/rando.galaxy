
bool IsBuilding(string entry)
{
    int i;
    for( i=0; i<num_randomized_buildings; i+=1 ) {
        if( entry == randomized_buildings[i] ) {
            return true;
        }
    }
    return false;
}


int GetRandomField(int cat, string scope, string entry)
{
    int chances;
    int i;

    if( scope == "CUnit" && IsBuilding(entry) ) {
        scope = "CUnitBuilding";
    }

    chances = 0;
    for( i=0; i<256; i+=1 ) {
        if( randomized_fields[i].scope == scope && randomized_fields[i].name != "" ) {
            chances += randomized_fields[i].chance;
        }
    }

    if( chances == 0 ) {
        return -1;
    }

    chances = RandomInt(0, chances-1);
    for( i=0; i<256; i+=1 ) {
        if( randomized_fields[i].scope == scope && randomized_fields[i].name != "" ) {
            if( chances < randomized_fields[i].chance ) {
                return i;
            }
            chances-=randomized_fields[i].chance;
        }
    }

    return -1;
}


void modify_resources(string name, fixed percent) {
    int i;
    int num;
    int val;
    unitgroup units;
    unit u;
    int max;
    string behavior;

    behavior = CatalogFieldValueGet(c_gameCatalogUnit, name, "BehaviorArray[0].Link", default_player);
    max = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, behavior, "Capacity", default_player);

    units = UnitGroup(name, 0, RegionEntireMap(), UnitFilter(0,0,0,0), 99999 );
    num = UnitGroupCount(units, c_unitCountAll);
    debug("found "+IntToString(num)+" of "+name);
    for( i=1; i<=num; i+=1 ) {
        u = UnitGroupUnit(units, i);
        val = UnitGetPropertyInt(u, c_unitPropResources, true);
        if( val < 10000 ) {
            val = FixedToInt(IntToFixed(val) / 100 * percent);
        } else {
            val = (val / 100) * FixedToInt(percent);
        }
        val = MinI(val, max);
        if( val < 0 ) {
            // detect overflow
            val = max;
        }
        val = MaxI(val, 200);
        info(name+" behavior "+behavior+" set from "+IntToString(UnitGetPropertyInt(u, c_unitPropResources, true))+" to "+IntToString(val)+", max of "+IntToString(max));
        UnitSetPropertyInt(u, c_unitPropResources, val);
    }
}


void modify_behavior_resource(string name, fixed amount_percent, fixed amount, fixed time) {
    fixed val;

    // TODO:
    // Catalog field 'HarvestAmount' could not be written (Core: access denied to required object or service)
    // Catalog field 'HarvestTime' could not be written (Core: access denied to required object or service)
    // Catalog field 'Capacity' could not be written (Core: access denied to required object or service)
    // Catalog field 'Contents' could not be written (Core: access denied to required object or service)

    //val = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, name, "HarvestAmount", default_player);
    //val = val * amount / 100.0;
    //set_field_fixed(c_gameCatalogBehavior, name, "HarvestAmount", val );

    //val = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, name, "HarvestTime", default_player);
    //val = val * time / 100.0;
    //set_field_fixed(c_gameCatalogBehavior, name, "HarvestTime", val );

    //val = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, name, "Capacity", default_player);
    //val = val * amount_percent / 100.0;
    //set_field_string(c_gameCatalogBehavior, name, "Capacity", FixedToString(val,0) );

    //val = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, name, "Contents", default_player);
    //val = val * amount_percent / 100.0;
    //set_field_string(c_gameCatalogBehavior, name, "Contents", FixedToString(val,0) );
}


void randomize_economy() {
    fixed amount_percent;
    fixed harvestamount_percent;
    fixed harvesttime_percent;
    Change change;
    playergroup players;
    int i;
    int len;
    int player;
    int starting_workers;
    int started_workers;
    int supply_limit;

    GameSetSeed( 0451 + seed );

    // CBehaviorResource minerals
    amount_percent = randomize_min_max(100, min_resources, max_resources);
    harvestamount_percent = randomize_min_max(100, min_resources, max_resources);
    harvesttime_percent = randomize_min_max(100, min_resources, max_resources);
    modify_behavior_resource("HighYieldMineralFieldMinerals", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HighYieldMineralFieldMinerals750", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("MineralFieldMinerals", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("MineralFieldMinerals450", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("MineralFieldMinerals750", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("MineralFieldMineralsNoRemove", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("MineralFieldMineralsOpaque", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("MineralFieldMineralsOpaque900", amount_percent, harvestamount_percent, harvesttime_percent);
    // TODO: fix these
    //add_change(no_race, 0, "Minerals Harvest", "Amount", "", 5, 5.0*harvestamount_percent/100);
    //add_change(no_race, 0, "Minerals Harvest", "Time", "", 2.786, 2.786*harvesttime_percent/100);

    // minerals
    modify_resources("MineralField", amount_percent);
    modify_resources("MineralField450", amount_percent);
    modify_resources("MineralField750", amount_percent);
    modify_resources("LabMineralField", amount_percent);
    modify_resources("LabMineralField750", amount_percent);
    modify_resources("BattleStationMineralField", amount_percent);
    modify_resources("BattleStationMineralField750", amount_percent);
    modify_resources("MineralFieldDefault", amount_percent);
    modify_resources("MineralFieldOpaque", amount_percent);
    modify_resources("MineralFieldOpaque900", amount_percent);
    modify_resources("PurifierMineralField", amount_percent);
    modify_resources("PurifierMineralField750", amount_percent);
    modify_resources("PurifierRichMineralField", amount_percent);
    modify_resources("PurifierRichMineralField750", amount_percent);
    modify_resources("RichMineralField", amount_percent);
    modify_resources("RichMineralField750", amount_percent);
    modify_resources("RichMineralFieldDefault", amount_percent);

    change.cat = -1;
    change.entry = "Minerals";
    change.field = "%";
    change.oldval = 100;
    change.newval = amount_percent;
    add_change(no_race, change);

    // CBehaviorResource gas
    amount_percent = randomize_min_max(100, min_resources, max_resources);
    harvestamount_percent = randomize_min_max(100, min_resources, max_resources);
    harvesttime_percent = randomize_min_max(100, min_resources, max_resources);
    modify_behavior_resource("HarvestableRichVespeneGeyserGas", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableRichVespeneGeyserGasProtoss", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableRichVespeneGeyserGasZerg", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableTerrazineGeyserGas", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableTerrazineGeyserGasProtoss", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableTerrazineGeyserGasZerg", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableVespeneGeyserGas", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableVespeneGeyserGasProtoss", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("HarvestableVespeneGeyserGasZerg", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("RawRichVespeneGeyserGas", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("RawTerrazineGeyserGas", amount_percent, harvestamount_percent, harvesttime_percent);
    modify_behavior_resource("RawVespeneGeyserGas", amount_percent, harvestamount_percent, harvesttime_percent);
    // TODO: fix these
    //add_change(no_race, 0, "Gas Harvest", "Amount", "", 4, 4.0*harvestamount_percent/100);
    //add_change(no_race, 0, "Gas Harvest", "Time", "", 1.981, 1.981*harvesttime_percent/100);

    // gasses
    modify_resources("ProtossVespeneGeyser", amount_percent);
    modify_resources("PurifierVespeneGeyser", amount_percent);
    modify_resources("RichVespeneGeyser", amount_percent);
    modify_resources("ShakurasVespeneGeyser", amount_percent);
    modify_resources("SpacePlatformGeyser", amount_percent);
    modify_resources("VespeneGeyser", amount_percent);

    change.cat = -1;
    change.entry = "Gas";
    change.field = "%";
    change.oldval = 100;
    change.newval = amount_percent;
    add_change(no_race, change);

    // TODO: for some reason it's able to read the starting workers, but trying to write them says
    // Catalog field 'StartingUnitArray[1].Count' could not be written (Core: access denied to required object or service)
    //for( i=0; i<16; i+=1 ) {
    //    info("Terr "+CatalogFieldValueGet(c_gameCatalogRace, "Terr", "StartingUnitArray[1].Count", i ));
    //    CatalogFieldValueSet(c_gameCatalogRace, "Terr", "StartingUnitArray[1].Count", i, IntToString(i) );
    //    info("Prot "+CatalogFieldValueGet(c_gameCatalogRace, "Prot", "StartingUnitArray[1].Count", i ));
    //    CatalogFieldValueSet(c_gameCatalogRace, "Prot", "StartingUnitArray[1].Count", i, IntToString(i) );
    //    info("Zerg "+CatalogFieldValueGet(c_gameCatalogRace, "Zerg", "StartingUnitArray[1].Count", i ));
    //    CatalogFieldValueSet(c_gameCatalogRace, "Zerg", "StartingUnitArray[1].Count", i, IntToString(i) );
    //}

    // TODO: randomize max supply, starting workers, maybe worker supply
    // https://mapster.talv.space/galaxy/reference/unit-group
    // UnitGroup("Probe", c_playerAny, RegionEntireMap(), null, 0)
    started_workers = CatalogFieldValueGetAsInt(c_gameCatalogRace, "Terr", "StartingUnitArray[1].Count", default_player );
    starting_workers = FixedToInt(rng(min_starting_workers, max_starting_workers));
    
    players = PlayerGroupActive();
    len = PlayerGroupCount(players);
    for( i=1; i<=len; i+=1 ) {
        player = PlayerGroupPlayer(players, i);
        DeleteUnits("Probe SCV Drone", player, started_workers-starting_workers);
    }

    change.cat = -1;
    change.entry = "Starting Workers";
    change.field = "";
    change.oldval = 12;
    change.newval = starting_workers;
    add_change(no_race, change);

    supply_limit = FixedToInt(rng(min_supply_limit, max_supply_limit));
    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            PlayerModifyPropertyInt(player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, supply_limit);
        }
    }

    change.cat = -1;
    change.entry = "Supply Limit";
    change.field = "";
    change.oldval = 200;
    change.newval = supply_limit;
    add_change(no_race, change);
}


int randomize_field(int cat, string scope, string unit_entry, string entry, string field, string friendly_name, fixed buff, string val, int type, string field_type, int race_id, int num_fields );
int randomize_behavior(string unit_entry, string entry, int race_id, int num_fields);
int randomize_effect(string unit_entry, string entry, int race_id, int num_fields);
int randomize_weapon(string unit_entry, string entry, int race_id, int num_fields);
int randomize_upgrade(string unit_entry, string entry, int race_id, int num_fields);
int randomize_ability(string unit_entry, string entry, int race_id, int num_fields);
int randomize_unit(string entry, int race_id, int num_fields);


string parse_friendly_name(int cat, string entry, string prefix, string friendly_name, string prev_friendly_name) {
    int slot;
    string field;

    if( friendly_name != "" && StringFind(friendly_name, ".", true) == 1 ) {
        slot = StringFind(friendly_name, " ", true);
        if( slot > 1 ) {
            field = prefix + StringSub(friendly_name, 1, slot-1);
            friendly_name = StringSub(friendly_name, slot, StringLength(friendly_name));
        } else {
            field = prefix + friendly_name;
        }
        friendly_name = CatalogFieldValueGet(cat, entry, field, default_player) + friendly_name;
        if( friendly_name == "" ) {
            debug(entry+" failed parse_friendly_name "+field);
            return friendly_name;
        }
    }

    return friendly_name;
}


int randomize_fields(int cat, string scope, string unit_entry, string entry, string prefix, int race_id, int num_fields) {
    int i;
    int k;
    int slot;
    int slot2;
    int num;
    bool[1024] mask;
    int len;
    string field;
    string val;
    int type;
    string field_type;
    string friendly_name;
    fixed buff;

    debug("randomize_fields("+IntToString(cat)+", "+scope+", "+unit_entry+", "+entry+", "+prefix+")");

    num = 0;
    for( i=0; num<num_fields && i<32; i+=1 ) {
        slot = GetRandomField(cat, scope, entry);
        if( slot == -1 ) {
            if( num==0 ) {
                debug(scope+" "+entry+" GetRandomField failed");
                note_add(scope+" GetRandomField failed");
            }
            return num;
        }
        if( mask[slot] ) { continue; }
        mask[slot] = true;

        field = randomized_fields[slot].name;
        type = randomized_fields[slot].type;
        buff = randomized_fields[slot].buff;
        
        if( randomized_fields[slot].is_array ) {
            len = CatalogFieldValueCount(cat, entry, prefix+field, default_player);
            field_type = CatalogFieldType(scope, prefix+field);
            for( k=0; num<num_fields && k<len; k+=1 ) {
                slot2 = RandomInt(0,len-1);
                friendly_name = randomized_fields[slot].friendly_name;
                if( type != type_struct ) {
                    val = CatalogFieldValueGet(cat, entry, prefix+field+"["+IntToString(slot2)+"]", default_player);
                    if( val == "" ) {
                        debug(scope+" "+entry+" failed CatalogFieldValueGet "+prefix+field+"["+IntToString(slot2)+"]");
                        continue;
                    }
                } else {
                    val = "";
                }
                num += randomize_field(cat, scope, unit_entry, entry, prefix+field+"["+IntToString(slot2)+"]", friendly_name, buff, val, type, field_type, race_id, num_fields );
            }
        } else {
            friendly_name = parse_friendly_name(cat, entry, prefix, randomized_fields[slot].friendly_name, friendly_name);
            if( type != type_struct ) {
                val = CatalogFieldValueGet(cat, entry, prefix+field, default_player);
                if( val == "" ) {
                    debug(scope+" "+entry+" failed CatalogFieldValueGet "+prefix+field);
                    continue;
                }
            } else {
                val = "";
            }
            num += randomize_field(cat, scope, unit_entry, entry, prefix+field, friendly_name, buff, val, type, "", race_id, num_fields );
        }
    }

    return num;
}


int randomize_behavior(string unit_entry, string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogBehavior;
    string scope;
    if( entry == "" ) {
        note_add("randomize_behavior empty entry");
        return 0;
    }
    if( entry == "WarpInEffect" || entry == "WarpInEffect15" ) {
        return 0;
    }
    if( ! CatalogEntryIsValid(cat, entry) ) {
        return 0;
    }

    scope = CatalogEntryScope(cat, entry);
    return randomize_fields(cat, scope, unit_entry, entry, "", race_id, num_fields);
}


int randomize_effect(string unit_entry, string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogEffect;
    string scope;
    if( entry == "" ) {
        note_add("randomize_effect empty entry");
        return 0;
    }
    if( ! CatalogEntryIsValid(cat, entry) ) {
        return 0;
    }

    scope = CatalogEntryScope(cat, entry);
    return randomize_fields(cat, scope, unit_entry, entry, "", race_id, num_fields);
}


int randomize_weapon(string unit_entry, string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogWeapon;
    string scope;

    if( entry == "" ) {
        return 0;
    }
    if( ! CatalogEntryIsValid(cat, entry) ) {
        return 0;
    }

    scope = CatalogEntryScope(cat, entry);
    return randomize_fields(cat, scope, unit_entry, entry, "", race_id, num_fields);
}


int randomize_upgrade(string unit_entry, string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogUpgrade;
    string scope;

    if( entry == "" ) {
        return 0;
    }
    if( ! CatalogEntryIsValid(cat, entry) ) {
        return 0;
    }

    // TODO: maybe if EffectArray[i].Operation is anything except Set, then it can be randomized
    scope = CatalogEntryScope(cat, entry);
    return randomize_fields(cat, scope, unit_entry, entry, "", race_id, num_fields);
}


int randomize_ability(string unit_entry, string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogAbil;
    string scope;

    if( entry == "" ) {
        return 0;
    }
    if( ! CatalogEntryIsValid(cat, entry) ) {
        return 0;
    }

    scope = CatalogEntryScope(cat, entry);
    return randomize_fields(cat, scope, unit_entry, entry, "", race_id, num_fields);
}


int randomize_unit(string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogUnit;
    string scope = "CUnit";
    int i;
    int slot;
    string val;
    int ret;

    if( entry == "" ) {
        return 0;
    }
    if( ! CatalogEntryIsValid(cat, entry) ) {
        return 0;
    }

    ret = randomize_fields(cat, scope, entry, entry, "", race_id, num_fields);
    return ret;
}


string get_random_unit() {
    int slot;
    slot = RandomInt(0, num_randomized_units-1);

    // reduce chances for buildings, or maybe TODO: I should keep them as separate arrays
    if( RandomInt(0, 4) > 0 && IsBuilding(randomized_units[slot]) ) {
        return get_random_unit();
    }
    return randomized_units[slot];
}


void randomize_units(int faction, int changes_per_faction) {
    int cat = c_gameCatalogUnit;
    string scope = "CUnit";
    string entry;
    string cost_category;
    int race_id;
    int i;
    int slot;

    for( i=1; i<=changes_per_faction*20; i+=1 ) {

        if( race_changes[faction*4 + terran].len >= changes_per_faction
            && race_changes[faction*4 + protoss].len >= changes_per_faction
            && race_changes[faction*4 + zerg].len >= changes_per_faction
        ) {
            break;
        }
        GameSetSeed( 5 + seed*3 + i*2713 + faction*3331);
        entry = get_random_unit();
        race_id = get_race_id(cat, scope, entry);
        if( race_id == no_race ) {
            continue;
        }
        race_id += faction*4;
        if( race_changes[race_id].len >= changes_per_faction ) {
            continue;
        }

        randomize_unit(entry, race_id, RandomInt(1,changes_per_unit) );
    }

    GameSetSeed(seed);
}


int randomize_field(int cat, string scope, string unit_entry, string entry, string field, string friendly_name, fixed buff, string val, int type, string field_type, int race_id, int num_fields ) {
    if( type == type_fixed ) {
        if( rando_field_fixed(cat, unit_entry, entry, field, friendly_name, race_id, buff) ) {
            return 1;
        }
    }
    else if( type == type_int ) {
        if( rando_field_int(cat, unit_entry, entry, field, friendly_name, race_id, buff) ) {
            return 1;
        }
    }
    else if( type == type_unit ) {
        return randomize_unit(val, race_id, num_fields);
    }
    else if( type == type_ability ) {
        return randomize_ability(unit_entry, val, race_id, num_fields);
    }
    else if( type == type_effect ) {
        return randomize_effect(unit_entry, val, race_id, num_fields);
    }
    else if( type == type_weapon ) {
        return randomize_weapon(unit_entry, val, race_id, num_fields);
    }
    else if( type == type_upgrade ) {
        return randomize_upgrade(unit_entry, val, race_id, num_fields);
    }
    else if( type == type_behavior ) {
        return randomize_behavior(unit_entry, val, race_id, num_fields);
    }
    else if( type == type_struct ) {
        if( field_type == "" ) {
            field_type = CatalogFieldType(scope, field);
        }
        return randomize_fields(cat, field_type, unit_entry, entry, field, race_id, num_fields);
    }
    else {
        if( field_type == "" ) {
            field_type = CatalogFieldType(CatalogEntryScope(cat, entry), field);
        }
        info(scope+" "+entry+" has "+field_type+" ("+IntToString(type)+") "+field+" "+friendly_name+", value: "+val );
        note_add(scope+" has "+field_type+" ("+IntToString(type)+") "+field+", value: "+val );
        return 0;
    }

    return 0;
}


void do_rando() {
    int i;
    bool seed_was_locked;

    notice("Randomizing with seed "+IntToString(seed)+", "+IntToString(num_factions)+" factions, "+IntToString(num_bans)+" bans, "+IntToString(changes_per_faction)+" changes per faction, "+FixedToString(min_percent,1)+"% minimum, "+FixedToString(max_percent,1)+"% maximum.");
    Wait(0.1, c_timeReal);

    seed_was_locked = GameIsSeedLocked();
    GameSetSeed(seed);

    randomize_economy();
    for( i=0; i < num_factions; i+=1 ) {
        Wait(0.1, c_timeReal);
        race_changes[i*4 + no_race].name = "General";
        race_changes[i*4 + terran].name = "Terran Faction "+IntToString(i+1);
        race_changes[i*4 + protoss].name = "Protoss Faction "+IntToString(i+1);
        race_changes[i*4 + zerg].name = "Zerg Faction "+IntToString(i+1);
        randomize_units(i, changes_per_faction);
    }

    notes_log();
    GameSetSeedLocked(seed_was_locked);
}
