include "TriggerLibs/NativeLib"

// https://mapster.talv.space/galaxy/reference#catalog
// https://sc2mapster.fandom.com/wiki/Tutorials

string number_types;
fixed min_percent;
fixed max_percent;
int seed;
int changes_per_race;

struct Change {
    string entry;
    string field;
    fixed oldval;
    fixed newval;
};

struct RaceChanges {
    string name;
    Change[64] changes;
    int len;
};
const int no_race=0;
const int terran=1;
const int protoss=2;
const int zerg=3;
RaceChanges[4] race_changes;

string[32] unit_fixed_fields;
string[32] unit_int_fields;

string[32] weapon_fixed_fields;// Range, 
string[32] effect_int_fields;// Amount

string[100] notes;
void note_add(string val)
{
    int i;
    for( i=0; i<100; i+=1 ) {
        if( notes[i] == val ) {
            return;
        }
        if( notes[i] == "" ) {
            notes[i] = val;
            return;
        }
    }
}

void notes_log()
{
    int i;
    for( i=0; i<100; i+=1 ) {
        if( notes[i] == "" ) {
            continue;
        }
        TriggerDebugOutput(1, StringToText(notes[i]), false );
    }
}

bool add_change(int self, string entry, string field, fixed oldval, fixed newval)
{
    string message;
    int len;

    len = race_changes[self].len;
    if( len >= 64 ) {
        message = "add_change failed with "+entry+" "+field+" changing from "+FixedToString(oldval,5)+" to "+FixedToString(newval,5);
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    race_changes[self].changes[len].entry = entry;
    race_changes[self].changes[len].field = field;
    race_changes[self].changes[len].oldval = oldval;
    race_changes[self].changes[len].newval = newval;
    race_changes[self].len += 1;

    //message = "add_change with "+entry+" "+field+" changing from "+FixedToString(oldval,5)+" to "+FixedToString(newval,5);
    //TriggerDebugOutput(1, StringToText(message), false );

    return true;
}

void log_changes(int self)
{
    int i;
    string message;

    message = race_changes[self].name + " Changes: ";

    for( i=0; i < race_changes[self].len; i+=1 ) {
        if( i > 0 ) {
            message += ", ";
        }
        message +=
            race_changes[self].changes[i].entry+" "+race_changes[self].changes[i].field
            + " changed from "
            + FixedToString(race_changes[self].changes[i].oldval,5)
            + " to "+FixedToString(race_changes[self].changes[i].newval,5);
    }

    TriggerDebugOutput(1, StringToText(message), false );

    //UIDisplayMessage( PlayerGroupAll(), c_messageAreaChat, StringToText(message) );
    //UIShowTextCrawl( PlayerGroupAll(), StringToText(race_changes[self].name + " Changes: "), StringToText(message), 6, SoundLink("Silent", -1), SoundLink("Silent", -1));
    // https://mapster.talv.space/galaxy/reference/dialog-create
    // https://mapster.talv.space/galaxy/reference#dialog-dialog-items
}

fixed rng(fixed min, fixed max) {
    return RandomFixed(min, max);
}

fixed randomize(fixed val) {
    // probably should make all changes far away from 100%, since there will be few things changed
    return val * rng(min_percent, max_percent) / 100.0;
}


bool set_field_string(int cat, string entry, string field, string value)
{
    playergroup allplayers;
    int player;
    int num_players;
    int i;

    allplayers = PlayerGroupAll();
    num_players = PlayerGroupCount(allplayers);
    for( i=1; i<=num_players; i+=1 ) {
        player = PlayerGroupPlayer( allplayers, i );
        if( ! CatalogFieldValueSet(cat, entry, field, player, value) ) {
            return false;
        }
    }
    return true;
}


bool set_field_fixed(int cat, string entry, string field, fixed value)
{
    playergroup allplayers;
    int player;
    int num_players;
    int i;
    allplayers = PlayerGroupAll();
    num_players = PlayerGroupCount(allplayers);
    for( i=1; i<=num_players; i+=1 ) {
        player = PlayerGroupPlayer( allplayers, i );
        if( ! libNtve_gf_CatalogFieldValueSetAsReal(cat, entry, field, player, value) ) {
            return false;
        }
    }
    return true;
}


bool rando_field_fixed(int cat, string entry, string field, int changes_id)
{
    fixed getval;
    fixed setval;
    string message;
    fixed value;

    getval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, field, 1);
    if( getval == 0 ) {
        message = entry+" "+field+" failed to read";
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    value = randomize(getval);
    if( value == getval ) {
        return false;
    }
    if( ! set_field_fixed(cat, entry, field, value ) ) {
        message = entry+" "+field+" was "+FixedToString(getval,5)+", failed to change to "+FixedToString(value,5);
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    setval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, field, 1);
    if( getval == setval ) { return false; }

    add_change(changes_id, entry, field, getval, setval);

    if( field == "LifeMax" ) {
        if( ! set_field_fixed(cat, entry, "LifeStart", value) ) {
            return false;
        }
    }
    if( field == "ShieldsMax" ) {
        if( ! set_field_fixed(cat, entry, "ShieldsStart", value) ) {
            return false;
        }
    }
    return true;
}


bool rando_field_int(int cat, string entry, string field, int changes_id)
{
    int getval;
    int setval;
    string message;
    int value;

    getval = CatalogFieldValueGetAsInt(cat, entry, field, 1);
    if( getval == 0 ) {
        message = entry+" "+field+" failed to read";
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    value = FixedToInt( randomize(getval) );
    if( value == getval ) {
        return false;
    }
    if( ! set_field_string(cat, entry, field, IntToString(value) ) ) {
        message = entry+" "+field+" was "+IntToString(getval)+", failed to change to "+IntToString(value);
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    setval = CatalogFieldValueGetAsInt(cat, entry, field, 1);
    if( getval == setval ) { return false; }

    add_change(changes_id, entry, field, getval, setval);

    if( field == "LifeMax" ) {
        if( ! set_field_fixed(cat, entry, "LifeStart", value) ) {
            return false;
        }
    }
    if( field == "ShieldsMax" ) {
        if( ! set_field_fixed(cat, entry, "ShieldsStart", value) ) {
            return false;
        }
    }
    return true;
}


bool rando_field_array(int cat, string entry, string field, string scope, string type, int changes_id)
{
    fixed getval;
    string old;
    string message;
    string setval;
    string tfield;
    int len;
    int i;

    len = CatalogFieldValueCount(cat, entry, field, 1);
    message = scope+" "+entry+" "+field+" "+type+" with len "+IntToString(len);
    TriggerDebugOutput(1, StringToText(message), false );
    //return false;

    for( i=0; i<len; i+=1 ) {
        tfield = field+"["+IntToString(i)+"]";
        getval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        if( i>0 ) {
            old += "|";
        }
        old += FixedToString(getval, 5);
        if( ! set_field_string(cat, entry, tfield, FixedToString(randomize(getval), 5) ) ) {
            message = scope+" "+entry+" "+field+" "+type+" was "+old+", failed to change";
            TriggerDebugOutput(1, StringToText(message), false );
            return false;
        }
    }
    setval = "";
    for( i=0; i<len; i+=1 ) {
        tfield = field+"["+IntToString(i)+"]";
        getval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        if( i>0 ) {
            setval += "|";
        }
        setval += FixedToString(getval, 5);
    }
    if( old == setval ) {
        return false;
    }
    message = entry+" "+field+" was "+old+", changed to "+setval;
    TriggerDebugOutput(1, StringToText(message), false );
    return true;
}


bool rando_SAbilBuildInfo(int cat, string entry, string field, string scope, string type, int changes_id)
{
    string unitname;
    string tfield;
    string message;
    fixed oldtime;
    fixed newtime;
    fixed value;
    int len;
    int i;

    len = CatalogFieldValueCount(cat, entry, field, 1);
    for( i=0; i<len; i+=1 ) {
        tfield = field+"["+IntToString(i)+"].Unit";
        unitname = CatalogFieldValueGet(cat, entry, tfield, 1);

        tfield = field+"["+IntToString(i)+"].Time";
        oldtime = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        value = randomize(oldtime);
        if( ! set_field_fixed(cat, entry, tfield, value) ) {
            return false;
        }
        newtime = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        return add_change(changes_id, entry, field+" "+unitname, oldtime, newtime);
    }

    return true;
}


bool rando_unknown_type(int cat, string entry, string field, string scope, string type, int changes_id)
{
    string message;
    message = entry+" "+field+" "+type+" unknown type";
    TriggerDebugOutput(1, StringToText(message), false );
    return false;
}


bool rando_field(int cat, string scope, string entry, string field, int changes_id)
{
    string message;
    string type;
    bool is_array;

    //if( entry != "TerranBuild" && entry != "ProtossBuild" && entry != "ZergBuild" ) { return; }
    //if( field != "InfoArray" ) {return;}

    type = CatalogFieldType(scope, field);
    is_array = CatalogFieldIsArray(scope, field);

    if( type == "SAbilBuildInfo" ) {
        return rando_SAbilBuildInfo(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilTrainInfo" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilSpecializeInfo" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilResearchInfo") {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilMergeInfo") {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilArmMagazine" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SMarker" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SCost" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( StringContains(number_types, " "+type+" ", c_stringAnywhere, c_stringCase) ) {
        if( is_array ) {
            return rando_field_array(cat, entry, field, scope, type, changes_id);
            //return rando_unknown_type(cat, entry, field, scope, type, changes_id);
        } else {
            return rando_field_fixed(cat, entry, field, changes_id);
        }
    }

    return false;
}


void rando_entry(int cat, string scope, string entry, int changes_id)
{
    string field;
    string value;
    int num_fields;
    int i;
    int slot;

    num_fields = CatalogFieldCount(scope);
    for( i=0; i<num_fields; i+=1 ) {
        slot = RandomInt(0, num_fields);
        field = CatalogFieldGet(scope, slot);
        if( field == "" ) {
            continue;
        }
        if( rando_field(cat, scope, entry, field, changes_id) ) {
            return;
        }
    }
}


void rando_catalog(int cat, int num_changes)
{
    string entry;
    string scope;
    string race;
    string EditorCategories;
    int num_data;
    int i;
    int slot;
    int changes_id;

    num_data = CatalogEntryCount(cat);
    //UIDisplayMessage( PlayerGroupAll(), c_messageAreaChat, StringToText(IntToString(cat)+" found "+IntToString(num_data)+" num_data") );

    for( i=1; i<=num_data; i+=1 ) {
        if( race_changes[terran].len >= num_changes
            && race_changes[protoss].len >= num_changes
            && race_changes[zerg].len >= num_changes )
        {
            return;
        }

        slot = RandomInt(1, num_data);
        entry = CatalogEntryGet(cat, slot);
        scope = CatalogEntryScope(cat, entry);
        if( CatalogFieldExists(scope, "EditorCategories") ) {
            EditorCategories = CatalogFieldValueGet(cat, entry, "EditorCategories", 1);
            if( ! StringContains(EditorCategories, "ObjectFamily:Melee", c_stringAnywhere, c_stringCase) ) {
                continue;
            }
        } else {
            EditorCategories = "";
        }

        if( CatalogFieldExists(scope, "Race") ) {
            race = "Race:" + CatalogFieldValueGet(cat, entry, "Race", 1);
        }
        else {
            race = EditorCategories;
        }

        if( StringContains(race, "Race:Terr", c_stringAnywhere, c_stringCase) ) {
            changes_id = terran;
        }
        else if( StringContains(race, "Race:Prot", c_stringAnywhere, c_stringCase) ) {
            changes_id = protoss;
        }
        else if( StringContains(race, "Race:Zerg", c_stringAnywhere, c_stringCase) ) {
            changes_id = zerg;
        }
        else {
            continue;
        }

        if( race_changes[changes_id].len >= num_changes ) {
            continue;
        }

        rando_entry(cat, scope, entry, changes_id);
    }
}

int get_race_id(int cat, string scope, string entry) {
    string EditorCategories;
    string race;

    if( CatalogFieldExists(scope, "EditorCategories") ) {
        EditorCategories = CatalogFieldValueGet(cat, entry, "EditorCategories", 1);
        if( ! StringContains(EditorCategories, "ObjectFamily:Melee", c_stringAnywhere, c_stringCase) ) {
            return no_race;
        }
    } else {
        EditorCategories = "";
    }

    if( CatalogFieldExists(scope, "Race") ) {
        race = "Race:" + CatalogFieldValueGet(cat, entry, "Race", 1);
    }
    else {
        race = EditorCategories;
    }

    if( StringContains(race, "Race:Terr", c_stringAnywhere, c_stringCase) ) {
        return terran;
    }
    else if( StringContains(race, "Race:Prot", c_stringAnywhere, c_stringCase) ) {
        return protoss;
    }
    else if( StringContains(race, "Race:Zerg", c_stringAnywhere, c_stringCase) ) {
        return zerg;
    }
    
    return no_race;
}


void randomize_start() {
    // starting workers, mineral patches, geysers...
}


void randomize_workers() {
}


void randomize_effect(string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogEffect;
    if( entry == "" ) {
        return;
    }

    note_add(CatalogEntryScope(cat, entry));
}


void randomize_weapon(string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogWeapon;

    if( entry == "" ) {
        return;
    }
    // CWeapon_DisplayEffect is where the damage is defined?

    // scopes
    // CWeaponLegacy
    // CWeaponStrafe

    //set_add(CatalogEntryScope(cat, entry));
}


void randomize_ability(string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogAbil;
    string scope;
    string type;
    int len;
    int i;
    string val;

    if( entry == "" ) {
        return;
    }

    // scopes
    // CAbilBuild
    // CAbilMorphPlacement
    // CAbilMove
    // CAbilStop
    // CAbilBuildable
    // CAbilQueue
    // CAbilArmMagazine
    // CAbilResearch
    // CAbilMorph
    // CAbilAttack
    // CAbilWarpable
    // CAbilEffectTarget
    // CAbilTrain
    // CAbilRally
    // CAbilEffectInstant
    // CAbilAugment
    // CAbilMerge
    // CAbilTransport
    // CAbilMergeable
    // CAbilBehavior
    // CAbilRedirectInstant
    // CAbilRedirectTarget

    // InfoArray types
    // SAbilBuildInfo
    // SAbilMorphInfo
    // SAbilArmMagazineInfo
    // SAbilResearchInfo
    // SAbilTrainInfo
    // SAbilRallyInfo

    // "EngineeringBayResearch" is a CAbilResearch with InfoArray[3].Upgrade == TerranInfantryWeaponsLevel1, .Time=160, .Resource[Minerals/Vespene]
    scope = CatalogEntryScope(cat, entry);
    //set_add(scope);
    //len = CatalogFieldValueCount(cat, entry, "InfoArray", 1);
    //TriggerDebugOutput(1, StringToText(entry+" has InfoArray "+IntToString(len)), false );
    //TriggerDebugOutput(1, StringToText(entry+" has scope: "+scope), false );
}


void randomize_unit(string entry, int race_id, int num_fields) {
    int cat = c_gameCatalogUnit;
    string scope = "CUnit";
    int i;
    int len;
    string val;

    for( i=0; i<32; i+=1 ) {
        if( unit_fixed_fields[i] != "" ) {
            //rando_field_fixed(cat, entry, unit_fixed_fields[i], race_id);
        }
        if( unit_int_fields[i] != "" ) {
            //rando_field_int(cat, entry, unit_int_fields[i], race_id);
        }
    }

    // check abilities, weapons, and upgrades
    len = CatalogFieldValueCount(cat, entry, "AbilArray", 1);
    for( i=0; i<len; i+=1 ) {
        val = CatalogFieldValueGet(cat, entry, "AbilArray["+IntToString(i)+"].Link", 1);
        randomize_ability(val, race_id, num_fields);
    }

    len = CatalogFieldValueCount(cat, entry, "WeaponArray", 1);
    for( i=0; i<len; i+=1 ) {
        val = CatalogFieldValueGet(cat, entry, "WeaponArray["+IntToString(i)+"].Link", 1);
        randomize_weapon(val, race_id, num_fields);
    }
}


void randomize_units(int changes_per_race) {
    int cat = c_gameCatalogUnit;
    string scope = "CUnit";
    string entry;
    string cost_category;
    int num_data;
    int race_id;
    int i;
    int slot;

    num_data = CatalogEntryCount(cat);

    for( i=1; i<=num_data; i+=1 ) {

        if( race_changes[terran].len >= changes_per_race
            && race_changes[protoss].len >= changes_per_race
            && race_changes[zerg].len >= changes_per_race
        ) {
            break;
        }
        GameSetSeed( 5 + seed + i);
        slot = RandomInt(1, num_data);

        entry = CatalogEntryGet(cat, slot);
        race_id = get_race_id(cat, scope, entry);
        if( race_id == no_race ) {
            continue;
        }
        if( race_changes[race_id].len >= changes_per_race ) {
            continue;
        }

        cost_category = CatalogFieldValueGet(cat, entry, "CostCategory", 1);
        if( cost_category != "Army" && cost_category != "Technology" ) {
            continue;
        }

        GameSetSeed( 5 + seed + slot);
        randomize_unit(entry, race_id, 0);
    }

    GameSetSeed(seed);
}


void main () {
    bool seed_was_locked;
    int oldseed;
    int changes_per_category;
    int i;

    seed=1337;
    min_percent = 50;
    max_percent = 150;
    changes_per_race = 50;
    
    unit_int_fields[0] = "CostResource[Minerals]";
    unit_int_fields[1] = "CostResource[Vespene]";
    unit_int_fields[2] = "Food";
    unit_int_fields[3] = "LifeMax";
    unit_int_fields[4] = "ShieldsMax";
    unit_int_fields[5] = "EnergyMax";

    unit_fixed_fields[0] = "Acceleration";
    unit_fixed_fields[1] = "Speed";

    seed_was_locked = GameIsSeedLocked();
    GameSetSeed(seed);

    number_types = " CFixed CGameTime CGameAcceleration CGameSpeed CGameRate SAccumulatedFixed int32 ";

    changes_per_category = changes_per_race/5;
    //rando_catalog(c_gameCatalogUnit, changes_per_race*1);
    //rando_catalog(c_gameCatalogAbil, changes_per_race*2);
    //rando_catalog(c_gameCatalogUpgrade, changes_per_race*3);
    //rando_catalog(c_gameCatalogWeapon, changes_per_race*4);
    //rando_catalog(c_gameCatalogEffect, changes_per_race*5);

    randomize_units(changes_per_race);

    race_changes[no_race].name = "General";
    race_changes[terran].name = "Terran";
    race_changes[protoss].name = "Protoss";
    race_changes[zerg].name = "Zerg";
    for(i=0; i<4 ; i+=1 ) {
        log_changes(i);
    }

    notes_log();
    GameSetSeedLocked(seed_was_locked);
}
