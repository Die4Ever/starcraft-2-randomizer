
bank[16] cc_bank;
bank[16] cc_responses_bank;
string[16] cc_last_id;
trigger cc_ticker_trigger;
trigger cc_leave_game_trigger;
trigger normalgamespeed_trigger;

void cc_update_status(string status, int player) {
    string date;
    BankValueSetFromString(cc_responses_bank[player], "header", "status", status);
    date = libNtve_gf_FormatDateTimeasString(CurrentDateTimeGet());
    BankValueSetFromString(cc_responses_bank[player], "header", "date", date);
    BankSave(cc_responses_bank[player]);
    //BankWait(cc_responses_bank[player]);
    info("cc_update_status "+status+" "+IntToString(player));
}

void cc_set_last_id(string id, string status, int player) {
    string date;
    cc_last_id[player] = id;
    BankSectionRemove(cc_responses_bank[player], "responses");
    BankSectionCreate(cc_responses_bank[player], "responses");
    BankValueSetFromString(cc_responses_bank[player], "responses", id, status);
    date = libNtve_gf_FormatDateTimeasString(CurrentDateTimeGet());
    BankValueSetFromString(cc_responses_bank[player], "header", "date", date);
    BankSave(cc_responses_bank[player]);
}

bool cc_id_has_processed(string id, int player) {
    // might want to make this use a circular array so it can keep track of multiple IDs
    return id == cc_last_id[player];
}

bool cc_nukes() {
    unitgroup townhalls;
    townhalls = GetUnitsOfTypes("Nexus CommandCenter CommandCenterFlying OrbitalCommand OrbitalCommandFlying PlanetaryFortress Hatchery Lair Hive", c_playerAny);
    return false;
}

int num_has_resources(int resource, int minimum, int maximum) {
    int player;
    int counter;
    int i;

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            i = PlayerGetPropertyInt(player, resource);
            if( i >= minimum && i <= maximum ) {
                counter += 1;
            }
        }
    }

    return counter;
}

bool add_resources(int resource, int amount, int min, int max, int minimum_players) {
    int player;
    int i;
    int a;

    if( amount >= 0 ) {
        if( num_has_resources(resource, min, max - 1) < minimum_players ) {
            return false;
        }
    } else {
        if( num_has_resources(resource, min + 1, max) < minimum_players ) {
            return false;
        }
    }

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            i = PlayerGetPropertyInt(player, resource);
            a = amount;
            if( i + a > max ) {
                a = max - i;
            }
            if( i + a < min ) {
                a = min - i;
            }
            if( amount > 0 ) {
                PlayerModifyPropertyInt(player, resource, c_playerPropOperAdd, a);
            } else if(amount < 0) {
                PlayerModifyPropertyInt(player, resource, c_playerPropOperSubtract, -a);
            }
        }
    }
    return true;
}

int get_resource_any_player(int resource) {
    int player;

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            return PlayerGetPropertyInt(player, resource);
        }
    }

    return 0;
}

int set_upgrade_level(int player, string upgrade, int set) {
    int has;
    has = TechTreeUpgradeCount(player, upgrade, c_techCountCompleteOnly);
    if(has == set) {
        return 0;
    }
    if( has > 0 && set > 0 ) {
        return 0;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(player, upgrade, set);
    return 1;
}

bool set_player_armor_upgrades(int player, int level) {
    int set;
    int i;
    string slevel;
    int counter;

    if(!PlayerIsActive(player)) {
        return false;
    }

    for(i=1; i<=3; i+=1) {
        if(i<=level) {
            set = 1;
        } else {
            set = 0;
        }
        slevel = IntToString(i);
        counter += set_upgrade_level(player, "ProtossAirArmorsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ProtossGroundArmorsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ProtossShieldsLevel"+slevel, set);
        counter += set_upgrade_level(player, "TerranInfantryArmorsLevel"+slevel, set);
        counter += set_upgrade_level(player, "TerranVehicleAndShipArmorsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ZergFlyerArmorsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ZergGroundArmorsLevel"+slevel, set);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(player, "ProtossAirArmors", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ProtossGroundArmors", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ProtossShields", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "TerranInfantryArmors", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "TerranVehicleAndShipArmors", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ZergFlyerArmors", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ZergGroundArmors", level);

    return counter > 0;
}

bool set_player_weapon_upgrades(int player, int level) {
    int set;
    int i;
    string slevel;
    int counter;

    if(!PlayerIsActive(player)) {
        return false;
    }

    for(i=1; i<=3; i+=1) {
        if(i<=level) {
            set = 1;
        } else {
            set = 0;
        }
        slevel = IntToString(i);
        counter += set_upgrade_level(player, "ProtossAirWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ProtossGroundWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "TerranInfantryWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "TerranShipWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "TerranVehicleWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ZergFlyerWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ZergMeleeWeaponsLevel"+slevel, set);
        counter += set_upgrade_level(player, "ZergMissileWeaponsLevel"+slevel, set);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(player, "ProtossAirWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ProtossGroundWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "TerranInfantryWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "TerranShipWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "TerranVehicleWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ZergFlyerWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ZergMeleeWeapons", level);
    libNtve_gf_SetUpgradeLevelForPlayer(player, "ZergMissileWeapons", level);

    return counter > 0;
}

bool set_units_owner(unitgroup units, int player, bool change_color) {
    int i;
    int len;
    unit u;

    len = UnitGroupCount(units, c_unitCountAll);
    for(i=1; i<=len; i+=1) {
        u = UnitGroupUnit(units, i);
        UnitSetOwner(u, player, change_color);
    }
    return true;
}

bool cc_musical_chairs() {
    unitgroup[16] groups;
    int[16] newplayers;
    playergroup players;
    int i;
    int len;
    int player;
    int newplayer;

    players = PlayerGroupActive();
    len = PlayerGroupCount(players);
    if(len < 2) {
        return false;
    }
    for(i=1; i<=len; i+=1) {
        player = PlayerGroupPlayer(players, i);
        newplayer = player;
        while(newplayer == player) {
            newplayer = PlayerGroupPlayer(players, rngi(1, len) );
        }
        newplayers[i] = newplayer;
        groups[i] = UnitGroup(null, player, RegionEntireMap(), UnitFilter(0,0,0,0), 999999 );
    }

    for(i=1; i<=len; i+=1) {
        set_units_owner(groups[i], newplayers[i], true);
    }

    return true;
}

bool normal_game_speed(bool testConds, bool runActions) {
    if( GameGetGlobalTimeScale() != 1 ) {
        GameSetGlobalTimeScale(1);
        notice("game speed is now back to normal");
    }
    return true;
}

bool cc_proc_request(int player, string code, string viewer, string params) {
    int iparam;
    int i;
    int counter;

    if(bdebug) {
        notice(viewer + " used " + code + " " + params+" from player "+IntToString(player));
    }
    if(params != "") {
        iparam = StringToInt(params);
    }
    if( code == "nukes" ) {
        return cc_nukes();
    } else if( code == "giveminerals" ) {
        add_resources(c_playerPropMinerals, iparam, 0, 999999, 0);
        notice(viewer+" gave everyone "+IntToString(iparam)+" minerals");
    } else if( code == "givegas") {
        add_resources(c_playerPropVespene, iparam, 0, 999999, 0);
        notice(viewer+" gave everyone "+IntToString(iparam)+" gas");
    } else if( code == "takeminerals") {
        if( add_resources(c_playerPropMinerals, -iparam, iparam, 999999, 1) ) {
            notice(viewer+" took away "+IntToString(iparam)+" minerals from everyone");
        } else {
            notice("no one has enough minerals");
            return false;
        }
    } else if( code == "takegas") {
        if( add_resources(c_playerPropVespene, -iparam, iparam, 999999, 1) ) {
            notice(viewer+" took away "+IntToString(iparam)+" gas from everyone");
        } else {
            notice("no one has enough vespene gas");
            return false;
        }
    } else if( code == "raisesupply") {
        if( add_resources(c_playerPropSuppliesLimit, iparam, 0, 250, 1) ) {
            notice(viewer+" increased the supply limit to "+IntToString(get_resource_any_player(c_playerPropSuppliesLimit)));
        } else {
            notice("supply limit is already at the maximum");
            return false;
        }
    } else if( code == "lowersupply") {
        if( add_resources(c_playerPropSuppliesLimit, -iparam, 50, 9999, 1) ) {
            notice(viewer+" lowered the supply limit to "+IntToString(get_resource_any_player(c_playerPropSuppliesLimit)));
        } else {
            notice("supply limit is already at the minimum");
            return false;
        }
    } else if( code == "superspeed" ) {
        if( GameGetGlobalTimeScale() < 1.5 ) {
            TriggerDestroy(normalgamespeed_trigger);
            normalgamespeed_trigger = TriggerCreate("normal_game_speed");
            TriggerAddEventTimeElapsed(normalgamespeed_trigger, 60, c_timeGame);
            GameSetGlobalTimeScale(1.5);
            notice(viewer+" set the game to super speed for 1 minute");
        } else {
            notice("the game is already at super speed");
            return false;
        }
    } else if( code == "slowspeed" ) {
        if( GameGetGlobalTimeScale() > 0.5 ) {
            TriggerDestroy(normalgamespeed_trigger);
            normalgamespeed_trigger = TriggerCreate("normal_game_speed");
            TriggerAddEventTimeElapsed(normalgamespeed_trigger, 60, c_timeGame);
            GameSetGlobalTimeScale(0.5);
            notice(viewer+" set the game to slow speed for 1 minute");
        } else {
            notice("the game is already at slow speed");
            return false;
        }
    } else if( code == "killworkers" ) {
        i = 0;
        for(player=1; player<16; player+=1) {
            if( ! PlayerIsActive(player) ) {
                continue;
            }
            i += DeleteUnits("Probe SCV Drone DroneBurrowed", player, -1);
            i += DeleteUnits("MULE", player, 99999);
        }
        if(i <= 0) {
            notice("no one has more than 1 worker");
            return false;
        }
        notice(viewer+" killed "+IntToString(i)+" workers");
    } else if( code == "killarmy" ) {
        // TODO: maybe do a UnitGroup of all units, and then do unit group subtraction with GetUnitsOfTypes("SCV Overlord...") and UnitFilter((1 << c_targetFilterStructure,0,0,0)) or UnitFilterStr("Structure")
        return false;
    } else if( code == "fullvision" ) {
        for(player=1; player<16; player+=1) {
            if(PlayerIsActive(player)) {
                VisRevealArea(player, RegionEntireMap(), 60, false);
            }
        }
        notice(viewer+" revealed the whole map for 1 minute");
    } else if( code == "maxupgrades" ) {
        counter = 0;
        for(player=1; player<16; player+=1) {
            if(set_player_weapon_upgrades(player, 3)) {
                counter += 1;
            }
            if(set_player_armor_upgrades(player, 3)) {
                counter += 1;
            }
        }
        if(counter > 0) {
            notice(viewer+" gave everyone max upgrades");
        } else {
            notice("everyone already has max upgrades");
        }
    } else if( code == "resetupgrades" ) {
        counter = 0;
        for(player=1; player<16; player+=1) {
            if(set_player_weapon_upgrades(player, 0)) {
                counter += 1;
            }
            if(set_player_armor_upgrades(player, 0)) {
                counter += 1;
            }
        }
        if(counter > 0) {
            notice(viewer+" reset everyone's upgrades");
        } else {
            notice("nobody has any upgrades");
        }
    } else if( code == "musicalchairs" ) {
        if(cc_musical_chairs()) {
            notice(viewer+" has invoked musical chairs");
        } else {
            notice("musical chairs failed");
            return false;
        }
    } else if( code == "extradamage" ) {
        // https://mapster.talv.space/galaxy/reference/lib-ntve-gf-change-unit-damage
        return false;
    } else {
        err("unknown crowd control effect");
        return false;
    }
    return true;
}

void cc_read_request(int player) {
    string code;
    string viewer;
    string id;
    string params;

    BankReload(cc_bank[player]);
    BankWait(cc_bank[player]);

    if( BankKeyExists(cc_bank[player], "request", "code") == false ) {
        debug("code doesn't exist");
        return;
    }

    code = BankValueGetAsString(cc_bank[player], "request", "code");
    viewer = BankValueGetAsString(cc_bank[player], "request", "DisplayViewer");
    id = BankValueGetAsString(cc_bank[player], "request", "id");
    params = BankValueGetAsString(cc_bank[player], "request", "params");

    if(cc_id_has_processed(id, player)) {
        return;
    }

    if( cc_proc_request(player, code, viewer, params) ) {
        cc_set_last_id(id, "success", player);
    } else {
        cc_set_last_id(id, "fail", player);
    }
}

bool cc_ticker(bool testConds, bool runActions) {
    int player;

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            cc_read_request(player);
        }
    }
    return true;
}

void StartCrowdControl() {
    int player;

    if(!crowd_control_enabled) {
        info("crowd control not enabled");
        cc_update_status("exited", player);
        return;
    }

    for(player=1; player<16; player+=1) {
        if( ! PlayerIsActive(player) ) {
            continue;
        }

        BankReload(cc_bank[player]);
        BankWait(cc_bank[player]);

        if( BankKeyExists(cc_bank[player], "request", "id") ) {
            cc_set_last_id(BankValueGetAsString(cc_bank[player], "request", "id"), "fail", player);
        }

        cc_update_status("playing", player);

        BankReload(cc_bank[player]);
        BankWait(cc_bank[player]);
    }
    debug("StartCrowdControl after waits");

    cc_ticker_trigger = TriggerCreate("cc_ticker");
    TriggerAddEventTimePeriodic(cc_ticker_trigger, 0.5, c_timeReal);
    notice("Crowd Control enabled!");
}

bool cc_leave_game(bool testConds, bool runActions) {
    int player;
    player = EventPlayer();
    if(PlayerIsActive(player)) {
        return true;
    }
    cc_update_status("exited", player);
    return true;
}

void init_crowd_control() {
    string date;
    int player;

    for(player=1; player<16; player+=1) {
        if( ! PlayerIsActive(player) ) {
            continue;
        }

        cc_bank[player] = BankLoad("CrowdControl", player);
        cc_responses_bank[player] = BankLoad("CrowdControlResponses", player);
        // loop through and clear all the response sections? or use keys instead of sections?
        BankSectionRemove(cc_responses_bank[player], "header");
        BankSectionCreate(cc_responses_bank[player], "header");
        BankValueSetFromString(cc_responses_bank[player], "header", "version", "0.23");
        cc_set_last_id("", "success", player);
        cc_update_status("starting", player);
    }

    cc_leave_game_trigger = TriggerCreate("cc_leave_game");
    TriggerAddEventPlayerLeft(cc_leave_game_trigger, c_playerAny, c_gameResultUndecided);
}
