include "TriggerLibs/NativeLib"

string number_types;
fixed min_percent;
fixed max_percent;
int seed;
int changes_per_race;

struct Change {
    string entry;
    string field;
    fixed oldval;
    fixed newval;
};

struct RaceChanges {
    string name;
    Change[64] changes;
    int len;
};
const int terran=0;
const int protoss=1;
const int zerg=2;
RaceChanges[3] race_changes;

bool add_change(int self, string entry, string field, fixed oldval, fixed newval)
{
    string message;
    int len;

    len = race_changes[self].len;
    if( len >= 64 ) {
        message = "add_change failed with "+entry+" "+field+" changing from "+FixedToString(oldval,5)+" to "+FixedToString(newval,5);
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    race_changes[self].changes[len].entry = entry;
    race_changes[self].changes[len].field = field;
    race_changes[self].changes[len].oldval = oldval;
    race_changes[self].changes[len].newval = newval;
    race_changes[self].len += 1;

    //message = "add_change with "+entry+" "+field+" changing from "+FixedToString(oldval,5)+" to "+FixedToString(newval,5);
    //TriggerDebugOutput(1, StringToText(message), false );

    return true;
}

void log_changes(int self)
{
    int i;
    string message;

    message = race_changes[self].name + " Changes: ";

    for( i=0; i < race_changes[self].len; i+=1 ) {
        if( i > 0 ) {
            message += ", ";
        }
        message +=
            race_changes[self].changes[i].entry+" "+race_changes[self].changes[i].field
            + " changed from "
            + FixedToString(race_changes[self].changes[i].oldval,5)
            + " to "+FixedToString(race_changes[self].changes[i].newval,5);
    }

    TriggerDebugOutput(1, StringToText(message), false );

    //UIDisplayMessage( PlayerGroupAll(), c_messageAreaChat, StringToText(message) );
    //UIShowTextCrawl( PlayerGroupAll(), StringToText(race_changes[self].name + " Changes: "), StringToText(message), 6, SoundLink("Silent", -1), SoundLink("Silent", -1));
    // https://mapster.talv.space/galaxy/reference/dialog-create
    // https://mapster.talv.space/galaxy/reference#dialog-dialog-items
}

fixed rng(fixed min, fixed max) {
    return RandomFixed(min, max);
}

fixed randomize(fixed val) {
    return val * rng(min_percent, max_percent) / 100.0;
}


bool set_field_string(int cat, string entry, string field, string value)
{
    playergroup allplayers;
    int player;
    int num_players;
    int i;

    allplayers = PlayerGroupAll();
    num_players = PlayerGroupCount(allplayers);
    for( i=1; i<=num_players; i+=1 ) {
        player = PlayerGroupPlayer( allplayers, i );
        if( ! CatalogFieldValueSet(cat, entry, field, player, value) ) {
            return false;
        }
    }
    return true;
}


bool set_field_fixed(int cat, string entry, string field, fixed value)
{
    playergroup allplayers;
    int player;
    int num_players;
    int i;
    allplayers = PlayerGroupAll();
    num_players = PlayerGroupCount(allplayers);
    for( i=1; i<=num_players; i+=1 ) {
        player = PlayerGroupPlayer( allplayers, i );
        if( ! libNtve_gf_CatalogFieldValueSetAsReal(cat, entry, field, player, value) ) {
            return false;
        }
    }
    return true;
}


bool rando_field_fixed(int cat, string entry, string field, string scope, string type, int changes_id)
{
    fixed getval;
    fixed setval;
    string message;
    fixed value;

    if( field == "LifeStart" || field == "ShieldsStart" ) { return false; }

    getval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, field, 1);
    if( getval == 0 ) {
        return false;
    }
    value = randomize(getval);
    if( ! set_field_fixed(cat, entry, field, value) ) {
        message = scope+" "+entry+" "+field+" "+type+" was "+FixedToString(getval,5)+", failed to change to "+FixedToString(value,5);
        TriggerDebugOutput(1, StringToText(message), false );
        return false;
    }
    setval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, field, 1);
    if( getval == setval ) { return false; }

    add_change(changes_id, entry, field, getval, setval);

    if( field == "LifeMax" ) {
        if( ! set_field_fixed(cat, entry, "LifeStart", value) ) {
            return false;
        }
    }
    if( field == "ShieldsMax" ) {
        if( ! set_field_fixed(cat, entry, "ShieldsStart", value) ) {
            return false;
        }
    }
    return true;
}


bool rando_field_array(int cat, string entry, string field, string scope, string type, int changes_id)
{
    fixed getval;
    string old;
    string message;
    string setval;
    string tfield;
    int len;
    int i;

    len = CatalogFieldValueCount(cat, entry, field, 1);
    message = scope+" "+entry+" "+field+" "+type+" with len "+IntToString(len);
    TriggerDebugOutput(1, StringToText(message), false );
    return false;

    for( i=0; i<len; i+=1 ) {
        tfield = field+"["+IntToString(i)+"]";
        getval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        if( i>0 ) {
            old += "|";
        }
        old += FixedToString(getval, 5);
        if( ! set_field_string(cat, entry, tfield, FixedToString(randomize(getval), 5) ) ) {
            message = scope+" "+entry+" "+field+" "+type+" was "+old+", failed to change";
            TriggerDebugOutput(1, StringToText(message), false );
            return false;
        }
    }
    setval = "";
    for( i=0; i<len; i+=1 ) {
        tfield = field+"["+IntToString(i)+"]";
        getval = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        if( i>0 ) {
            setval += "|";
        }
        setval += FixedToString(getval, 5);
    }
    if( old == setval ) {
        return false;
    }
    message = entry+" "+field+" was "+old+", changed to "+setval;
    TriggerDebugOutput(1, StringToText(message), false );
    return true;
}


bool rando_SAbilBuildInfo(int cat, string entry, string field, string scope, string type, int changes_id)
{
    string unitname;
    string tfield;
    string message;
    fixed oldtime;
    fixed newtime;
    fixed value;
    int len;
    int i;

    len = CatalogFieldValueCount(cat, entry, field, 1);
    for( i=0; i<len; i+=1 ) {
        tfield = field+"["+IntToString(i)+"].Unit";
        unitname = CatalogFieldValueGet(cat, entry, tfield, 1);

        tfield = field+"["+IntToString(i)+"].Time";
        oldtime = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        value = randomize(oldtime);
        if( ! set_field_fixed(cat, entry, tfield, value) ) {
            return false;
        }
        newtime = libNtve_gf_CatalogFieldValueGetAsReal(cat, entry, tfield, 1);
        return add_change(changes_id, entry, field+" "+unitname, oldtime, newtime);
    }

    return true;
}


bool rando_unknown_type(int cat, string entry, string field, string scope, string type, int changes_id)
{
    string message;
    message = entry+" "+field+" "+type+" unknown type";
    TriggerDebugOutput(1, StringToText(message), false );
    return false;
}


bool rando_field(int cat, string scope, string entry, string field, int changes_id)
{
    string message;
    string type;
    bool is_array;

    //if( entry != "TerranBuild" && entry != "ProtossBuild" && entry != "ZergBuild" ) { return; }
    //if( field != "InfoArray" ) {return;}

    type = CatalogFieldType(scope, field);
    is_array = CatalogFieldIsArray(scope, field);

    if( type == "SAbilBuildInfo" ) {
        return rando_SAbilBuildInfo(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilTrainInfo" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilSpecializeInfo" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilResearchInfo") {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilMergeInfo") {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SAbilArmMagazine" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SMarker" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( type == "SCost" ) {
        return rando_unknown_type(cat, entry, field, scope, type, changes_id);
    }
    else if( StringContains(number_types, " "+type+" ", c_stringAnywhere, c_stringCase) ) {
        if( is_array ) {
            return rando_field_array(cat, entry, field, scope, type, changes_id);
        } else {
            return rando_field_fixed(cat, entry, field, scope, type, changes_id);
        }
    }

    return false;
}


void rando_entry(int cat, string scope, string entry, int changes_id)
{
    string field;
    string value;
    int num_fields;
    int i;
    int slot;

    num_fields = CatalogFieldCount(scope);
    for( i=0; i<num_fields; i+=1 ) {
        slot = RandomInt(0, num_fields);
        field = CatalogFieldGet(scope, slot);
        if( field == "" ) {
            continue;
        }
        if( rando_field(cat, scope, entry, field, changes_id) ) {
            return;
        }
    }
}


void rando_catalog(int cat, int num_changes)
{
    string entry;
    string scope;
    string race;
    string EditorCategories;
    int num_data;
    int i;
    int slot;
    int changes_id;

    num_data = CatalogEntryCount(cat);
    //UIDisplayMessage( PlayerGroupAll(), c_messageAreaChat, StringToText(IntToString(cat)+" found "+IntToString(num_data)+" num_data") );

    for( i=1; i<=num_data; i+=1 ) {
        if( race_changes[terran].len >= num_changes
            && race_changes[protoss].len >= num_changes
            && race_changes[zerg].len >= num_changes )
        {
            return;
        }

        slot = RandomInt(1, num_data);
        entry = CatalogEntryGet(cat, slot);
        scope = CatalogEntryScope(cat, entry);
        if( CatalogFieldExists(scope, "EditorCategories") ) {
            EditorCategories = CatalogFieldValueGet(cat, entry, "EditorCategories", 1);
            if( ! StringContains(EditorCategories, "ObjectFamily:Melee", c_stringAnywhere, c_stringCase) ) {
                continue;
            }
        } else {
            EditorCategories = "";
        }

        if( CatalogFieldExists(scope, "Race") ) {
            race = "Race:" + CatalogFieldValueGet(cat, entry, "Race", 1);
        }
        else {
            race = EditorCategories;
        }

        if( StringContains(race, "Race:Terr", c_stringAnywhere, c_stringCase) ) {
            changes_id = terran;
        }
        else if( StringContains(race, "Race:Prot", c_stringAnywhere, c_stringCase) ) {
            changes_id = protoss;
        }
        else if( StringContains(race, "Race:Zerg", c_stringAnywhere, c_stringCase) ) {
            changes_id = zerg;
        }
        else {
            continue;
        }

        if( race_changes[changes_id].len >= num_changes ) {
            continue;
        }

        rando_entry(cat, scope, entry, changes_id);
    }
}


void main () {
    bool seed_was_locked;
    int oldseed;
    int changes_per_category;
    int i;

    seed=1337;
    min_percent = 50;
    max_percent = 150;
    changes_per_race = 50;

    seed_was_locked = GameIsSeedLocked();
    GameSetSeed(seed);

    number_types = " CFixed CGameTime CGameAcceleration CGameSpeed CGameRate SAccumulatedFixed int32 ";

    changes_per_category = changes_per_race/5;
    rando_catalog(c_gameCatalogUnit, changes_per_race*1);
    rando_catalog(c_gameCatalogAbil, changes_per_race*2);
    rando_catalog(c_gameCatalogUpgrade, changes_per_race*3);
    rando_catalog(c_gameCatalogWeapon, changes_per_race*4);
    rando_catalog(c_gameCatalogEffect, changes_per_race*5);

    race_changes[terran].name = "Terran";
    race_changes[protoss].name = "Protoss";
    race_changes[zerg].name = "Zerg";
    for(i=0; i <3 ; i+=1 ) {
        log_changes(i);
    }

    GameSetSeedLocked(seed_was_locked);
}
