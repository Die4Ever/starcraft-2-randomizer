
int rngi(int min, int max) {
    return RandomInt(min, max);
}

fixed rng(fixed min, fixed max) {
    return RandomFixed(min, max);
}

fixed rngexp(fixed origmin, fixed origmax, fixed curve)
{// has trouble with large numbers and small curves, like (100, 250, 0.4) doesn't work but (10, 25, 0.4)*10 works fine
    fixed frange;
    fixed f;
    fixed min;
    fixed max;
    min = origmin;
    max = origmax;
    if(min != 0) {
        min = Pow(min, 1.0/curve);
    }
    max = Pow(max+1.0, 1.0/curve);
    frange = max-min;
    f = rng(0, 1)*frange + min;
    f = Pow(f, curve);
    f = libNtve_gf_ArithmeticRealClamp( f, origmin, origmax );
    return f;
}

fixed randomize_min_max(fixed val, fixed min, fixed max) {
    fixed percent;
    // probably should make all changes far away from 100%, since there will be few things changed
    percent = rng(min, max);
    if( (percent - min) < (max - percent) ) {
        percent = (percent+min) / 2.0;
    } else {
        percent = (percent+max) / 2.0;
    }
    return val * (percent / 100.0);
}

fixed randomize(fixed val, fixed buff) {
    if(min_percent >= 85 || max_percent <= 115 || buff == 0.0) {
        return randomize_min_max(val, min_percent, max_percent);
    }
    
    if(rng(0,100) < buffs_nerfs) {
        if(buff > 0) {
            return randomize_min_max(val, MaxF(110.0, min_percent), max_percent);
        }
        else {
            return randomize_min_max(val, min_percent, MinF(90.0, max_percent));
        }
    }
    else {
        if(buff > 0) {
            return randomize_min_max(val, min_percent, MinF(90.0, max_percent));
        }
        else {
            return randomize_min_max(val, MaxF(110.0, min_percent), max_percent);
        }
    }
}


void debug(string message)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    //t = StringToText("debug: ") + t;
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
}

void info(string message)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    //t = StringToText("info: ") + t;
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
}

void info_t(text message)
{
    TriggerDebugOutput(1, message, false );
}

void notice(string message)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
}

void notice_t(text message)
{
    TriggerDebugOutput(1, message, false );
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, message);
}

void notifyplayer(string message, int player)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    UIDisplayMessage(PlayerGroupSingle(player), c_messageAreaChat, t);
}

void warning(string message)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );

    if(bdebug) {
        t = StringToText("warning: ") + t;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
    }
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    //t = StringToText("warning: ") + t;
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
}

void err(string message)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    t = StringToText("error: ") + t;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
}

void fatal(string message)
{
    text t;
    t = StringToText(message);
    TriggerDebugOutput(1, t, false );
    //libNtve_gf_UIErrorMessage( PlayerGroupAll(), t, SoundLink("UI_GenericError", -1));
    t = StringToText("fatal error: ") + t;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, t);
}


int find_change(int self, string entry, string field)
{
    int i;
    for( i=0; i < race_changes[self].len; i+=1 ) {
        if( race_changes[self].changes[i].entry == entry && race_changes[self].changes[i].field == field ) {
            return i;
        }
    }
    return -1;
}

bool add_change(int self, structref<Change> change)
{
    int len;

    len = race_changes[self].len;
    if( len >= 256 ) {
        err("add_change failed with "+change.entry+" "+change.field+" changing from "+FixedToString(change.oldval,precision)+" to "+FixedToString(change.newval,precision)+", buff "+FixedToString(change.buff, precision));
        return false;
    }
    race_changes[self].changes[len].cat = change.cat;
    race_changes[self].changes[len].unit_entry = change.unit_entry;
    race_changes[self].changes[len].entry = change.entry;
    race_changes[self].changes[len].field = change.field;
    race_changes[self].changes[len].friendly_name = change.friendly_name;
    race_changes[self].changes[len].oldval = change.oldval;
    race_changes[self].changes[len].newval = change.newval;
    race_changes[self].changes[len].buff = change.buff;
    race_changes[self].len += 1;

    debug("add_change with "+change.entry+" "+change.field+" "+change.friendly_name+" changing from "+FixedToString(change.oldval,precision)+" to "+FixedToString(change.newval,precision)+", buff "+FixedToString(change.buff, precision));

    return true;
}


playergroup GetPlayersOfType(int type)
{
    playergroup players;
    int i;

    players = PlayerGroupCopy(PlayerGroupActive());
    for( i=0; i<16; i+=1 ) {
        if( PlayerGroupHasPlayer(players, i) && PlayerType(i) != type ) {
            PlayerGroupRemove(players, i);
        }
    }

    return players;
}

bool PlayerIsActive(int player)
{
    return PlayerGroupHasPlayer(PlayerGroupActive(), player);
}

bool PlayerIsActiveHuman(int player)
{
    return PlayerGroupHasPlayer(GetPlayersOfType(c_playerTypeUser), player);
}

string[100] notes;
bool note_add(string val)
{
    int i;
    for( i=0; i<100; i+=1 ) {
        if( notes[i] == val ) {
            return false;
        }
        if( notes[i] == "" ) {
            info("note_add "+val);
            notes[i] = val;
            return true;
        }
    }
    return false;
}

void notes_log()
{
    int i;
    for( i=0; i<100; i+=1 ) {
        if( notes[i] == "" ) {
            continue;
        }
        TriggerDebugOutput(1, StringToText(notes[i]), false );
    }
}

int get_race_id(int cat, string scope, string entry) {
    string EditorCategories;
    string race;

    if( CatalogFieldExists(scope, "EditorCategories") ) {
        EditorCategories = CatalogFieldValueGet(cat, entry, "EditorCategories", default_player);
        if( ! StringContains(EditorCategories, "ObjectFamily:Melee", c_stringAnywhere, c_stringCase) ) {
            return no_race;
        }
    } else {
        EditorCategories = "";
    }

    if( CatalogFieldExists(scope, "Race") ) {
        race = "Race:" + CatalogFieldValueGet(cat, entry, "Race", default_player);
    }
    else {
        race = EditorCategories;
    }

    if( StringContains(race, "Race:Terr", c_stringAnywhere, c_stringCase) ) {
        return terran;
    }
    else if( StringContains(race, "Race:Prot", c_stringAnywhere, c_stringCase) ) {
        return protoss;
    }
    else if( StringContains(race, "Race:Zerg", c_stringAnywhere, c_stringCase) ) {
        return zerg;
    }
    
    return no_race;
}


text get_name(int cat, string entry) {
    string name;
    text t;
    text empty;

    if( cat == -1 ) {
        return StringToText(entry);
    }
    name = CatalogFieldValueGet(cat, entry, "Name", default_player);
    if( name == "" ) {
        return StringToText(entry);
    } else {
        t = StringExternal(name);
        if( t == StringToText(name) ) {
            return StringToText(entry);
        }
        if( entry == "OverlordTransport" ) {
            return t + StringToText(" Transport");
        }
        t = TextReplaceWord(t, StringToText("Behavior/Name/"), empty, c_stringReplaceAll, c_stringCase);
        t = TextReplaceWord(t, StringToText("Effect/Name/"), empty, c_stringReplaceAll, c_stringCase);
        return t;
    }
}

text change_to_text(structref<Change> change) {
    text s;
    string unit_entry;
    text unit_name;
    fixed ratio;

    unit_entry = change.unit_entry;
    if( change.cat == c_gameCatalogUnit ) {
        unit_entry = change.entry;
    }
    unit_name = get_name(c_gameCatalogUnit, unit_entry);
    s = unit_name;

    if( change.cat != c_gameCatalogUnit ) {
        s += StringToText(" ") + get_name(change.cat, change.entry);
    }

    if( change.friendly_name != "" ) {
        s += StringToText(" " + change.friendly_name);
        //s += " {" + change.field + "}";
    } else {
        s += StringToText(" " + change.field);
    }

    ratio = change.newval / change.oldval - 1.0;
    ratio *= change.buff;
    if(ratio > 0.0) {
        s += TextWithColor(StringToText(" buffed from "), Color(0, 100, 0));
    } else if(ratio < 0.0) {
        s += TextWithColor(StringToText(" nerfed from "), Color(90, 0, 38));
    } else {
        s += StringToText(" changed from ");
    }

    if( IntToFixed(FixedToInt(change.oldval)) == change.oldval
        && IntToFixed(FixedToInt(change.newval)) == change.newval ) {
        s += StringToText(FixedToString(change.oldval,0)
            + " to "+FixedToString(change.newval,0));
    }
    else {
        s += StringToText(FixedToString(change.oldval,precision)
            + " to "+FixedToString(change.newval,precision));
    }

    return s;
}


// only for sorting
string change_to_string(structref<Change> change) {
    string s;

    if( change.cat != c_gameCatalogUnit ) {
        s = change.unit_entry;
    }
    s += change.entry;

    if( change.friendly_name != "" ) {
        s += " " + change.friendly_name;
    } else {
        s += " " + change.field;
    }
    
    return s;
}


// separated by spaces
unitgroup GetUnitsOfTypes(string names, int player)
{
    unitgroup units;
    unitgroup tunits;
    string name;
    int i;

    units = UnitGroupEmpty();
    for(i=1; i<1000; i+=1) {
        name = StringWord(names, i);
        if(name == "") {
            break;
        }
        tunits = UnitGroup(name, player, RegionEntireMap(), UnitFilter(0,0,0,0), 999999 );
        UnitGroupAddUnitGroup(units, tunits);
    }
    return units;
}

int DeleteUnits(string names, int player, int num)
{
    unitgroup units;
    int i;
    unit u;

    units = GetUnitsOfTypes(names, player);
    if(num < 0) {
        num = UnitGroupCount(units, c_unitCountAll) + num;
    } else {
        num = MinI(num, UnitGroupCount(units, c_unitCountAll));
    }
    debug("found "+IntToString(num)+" of "+names);
    if( num < 0 ) {
        return 0;
    }
    for( i=1; i<=num; i+=1 ) {
        u = UnitGroupUnit(units, i);
        UnitRemove(u);
    }
    return num;
}

void copy_change(structref<Change> dst, structref<Change> src) {
    dst.cat = src.cat;
    dst.unit_entry = src.unit_entry;
    dst.entry = src.entry;
    dst.field = src.field;
    dst.friendly_name = src.friendly_name;
    dst.oldval = src.oldval;
    dst.newval = src.newval;
    dst.buff = src.buff;
}

typedef string[128] string_array;
void swap_changes(arrayref<changes_array> changes, arrayref<string_array> strings, int a, int b) {
    Change tc;
    string ts;
    copy_change(tc, changes[a]);
    copy_change(changes[a], changes[b]);
    copy_change(changes[b], tc);
    ts = strings[a];
    strings[a] = strings[b];
    strings[b] = ts;
}


int sort_faction_partition(arrayref<changes_array> changes, arrayref<string_array> strings, int start, int end) {
    string pivot;
    int pivotIndex;
    int i;
    int j;
    int count;

    pivot = strings[start];
    count = 0;
    for(i=start+1; i<=end; i+=1) {
        if(StringCompare(strings[i], pivot, true) <= 0) {
            count += 1;
        }
    }

    pivotIndex = start + count;
    swap_changes(changes, strings, start, pivotIndex);

    i = start;
    j = end;

    while (i < pivotIndex && j > pivotIndex) {
        while(StringCompare(strings[i], pivot, true) <= 0) {
            i+=1;
        }

        while(StringCompare(strings[j], pivot, true) > 0) {
            j-=1;
        }

        if(i < pivotIndex && j > pivotIndex) {
            swap_changes(changes, strings, i, j);
            i+=1;
            j-=1;
        }
    }

    return pivotIndex;
}


void sort_faction_changes(arrayref<changes_array> changes, arrayref<string_array> strings, int start, int end) {
    int i;
    string a;
    string b;
    int cmp;
    Change t;
    int p;

    if(start >= end) {
        return;
    }

    p = sort_faction_partition(changes, strings, start, end);
    sort_faction_changes(changes, strings, start, p-1);
    sort_faction_changes(changes, strings, p+1, end);
}


void sort_changes() {
    int i;
    string_array strings;
    int j;

    for(i=0; i< max_factions*4; i+=1) {
        if(race_changes[i].len > 0) {
            Wait(0.01, c_timeReal);
            for(j=0; j<race_changes[i].len; j+=1) {
                strings[j] = change_to_string(race_changes[i].changes[j]);
            }
            sort_faction_changes(race_changes[i].changes, strings, 0, race_changes[i].len-1);
        }
    }
}
