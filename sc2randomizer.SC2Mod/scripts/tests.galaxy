
bool testint(int result, int expected, string testname) {
    if(result == expected) {
        debug("pass: "+testname+": got "+IntToString(result));
        return true;
    }
    else {
        err("fail: "+testname+": got "+IntToString(result)+", expected "+IntToString(expected));
        return false;
    }
}

void check_rando(fixed f) {
    if(f < min_percent-1) {
        err("fail: "+FixedToString(f, 6)+" below min_percent");
    }
    if(f > max_percent+1) {
        err("fail: "+FixedToString(f, 6)+" above max_percent");
    }
    if(f > 91 && f < 109) {
        err("fail: "+FixedToString(f, 6)+" is too close to 100%");// too close to vanilla would be boring
    }
}

void test_rng() {
    int i;
    fixed f;

    for(i=0; i<1000; i+=1) {
        f = randomize(100.0, 0);
        check_rando(f);
        f = randomize(100.0, 1);
        check_rando(f);
        f = randomize(100.0, -1);
        check_rando(f);
    }
}

void run_tests() {
    int player;
    int faction;
    int i;
    string_array_128 unit_entries;
    fixed_array_128 buffs;
    fixed buff;

    // some tests could be run even in production code, possibly test to see if the bank is available

    if (GameIsTestMap(true) == true) {
        bdebug = true;
        info("automated test");
    }
    else if (GameIsTestMap(false) == true) {
        bdebug = true;
        info("manual test");
    }
    else {
        bdebug = false;
        info("no test");
        return;
    }

    info("run_tests");
    players_bans[get_player_faction_ban_slot(1, 5)] = true;
    for( player=0; player<16; player+=1 ) {
        for( faction=0; faction < 4*max_factions; faction+=1 ) {
            if( players_bans[get_player_faction_ban_slot(player, faction)] ) {
                debug( "Player " + IntToString(player) + " banned " + IntToString(faction) + " get_player_faction_ban_slot(player, faction) == " + IntToString(get_player_faction_ban_slot(player, faction)) );
            }
        }
    }
    players_bans[get_player_faction_ban_slot(1, 5)] = false;

    debug("PlayerGroupActive() found "+IntToString(PlayerGroupCount(PlayerGroupActive()))+" players");
    debug("PlayerGroupAll() found "+IntToString(PlayerGroupCount(PlayerGroupAll()))+" players");

    for( i=0; i<16; i+=1 ) {
        if( PlayerGroupHasPlayer(PlayerGroupAll(), i) ) {
            debug("PlayerGroupAll() has player "+IntToString(i)+" with type "+IntToString(PlayerType(i)) );
        }
    }

    debug( parse_friendly_name(c_gameCatalogUnit, "Factory", "", ".Name test", "prev") );

    buff = add_unit_buff(unit_entries, buffs, "Marine", 0.5, 1.0);
    debug("add_unit_buff 0.5, 1.0 == "+FixedToString(buff, precision));

    buff = add_unit_buff(unit_entries, buffs, "Marine", 1.5, 1.0);
    debug("add_unit_buff 1.5, 1.0 == "+FixedToString(buff, precision));

    buff = add_unit_buff(unit_entries, buffs, "Marine", 1.0, 0.5);
    debug("add_unit_buff 1.0, 0.5 == "+FixedToString(buff, precision));

    buff = add_unit_buff(unit_entries, buffs, "Marine", 1.0, 1.5);
    debug("add_unit_buff 1.0, 1.5 == "+FixedToString(buff, precision));

    buff = add_unit_buff(unit_entries, buffs, "Marine", 1.5, 1.5);
    debug("add_unit_buff 1.5, 1.5 == "+FixedToString(buff, precision));

    buff = add_unit_buff(unit_entries, buffs, "Marine", 0.5, 0.5);
    debug("add_unit_buff 0.5, 0.5 == "+FixedToString(buff, precision));

    testint( limit_num_bans(2, 5, 999), 4, "limit_num_bans 2 players, 5 factions" );
    testint( limit_num_bans(4, 5, 999), 2, "limit_num_bans 4 players, 5 factions" );
    testint( limit_num_bans(5, 5, 999), 1, "limit_num_bans 5 players, 5 factions" );
    testint( limit_num_bans(6, 5, 999), 0, "limit_num_bans 6 players, 5 factions" );

    testint( limit_num_bans(2, 3, 999), 2, "limit_num_bans 2 players, 3 factions" );
    testint( limit_num_bans(2, 8, 999), 7, "limit_num_bans 2 players, 8 factions" );

    testint( limit_num_bans(7, 8, 999), 2, "limit_num_bans 7 players, 8 factions" );

    test_rng();

    i = FixedToInt( IntToFixed(2) * 1.2 );
    testint(i, 2, "rounding check 2.4 to 2");
}
