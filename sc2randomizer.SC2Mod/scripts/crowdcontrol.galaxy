
bank[16] cc_bank;
bank[16] cc_responses_bank;
string[16] cc_last_id;
trigger cc_ticker_trigger;
trigger cc_leave_game_trigger;

// TODO: proper handling of a bank per player

void cc_update_status(string status, int player) {
    string date;
    BankValueSetFromString(cc_responses_bank[player], "header", "status", status);
    date = libNtve_gf_FormatDateTimeasString(CurrentDateTimeGet());
    BankValueSetFromString(cc_responses_bank[player], "header", "date", date);
    BankSave(cc_responses_bank[player]);
    //BankWait(cc_responses_bank[player]);
    info("cc_update_status "+status+" "+IntToString(player));
}

void cc_set_last_id(string id, string status, int player) {
    string date;
    cc_last_id[player] = id;
    BankSectionRemove(cc_responses_bank[player], "responses");
    BankSectionCreate(cc_responses_bank[player], "responses");
    BankValueSetFromString(cc_responses_bank[player], "responses", id, status);
    date = libNtve_gf_FormatDateTimeasString(CurrentDateTimeGet());
    BankValueSetFromString(cc_responses_bank[player], "header", "date", date);
    BankSave(cc_responses_bank[player]);
}

bool cc_nukes() {
    unitgroup townhalls;
    // c_playerAny or just the current player?
    townhalls = GetUnitsOfTypes("Nexus CommandCenter CommandCenterFlying OrbitalCommand OrbitalCommandFlying PlanetaryFortress Hatchery Lair Hive", c_playerAny);
    return false;
}

int num_has_resources(int resource, int minimum, int maximum) {
    int player;
    int counter;
    int i;

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            i = PlayerGetPropertyInt(player, resource);
            if( i >= minimum && i <= maximum ) {
                counter += 1;
            }
        }
    }

    return counter;
}

bool add_resources(int resource, int amount, int min, int max, int minimum_players) {
    int player;
    int i;
    int a;

    if( amount >= 0 ) {
        if( num_has_resources(resource, min, max - 1) < minimum_players ) {
            return false;
        }
    } else {
        if( num_has_resources(resource, min + 1, max) < minimum_players ) {
            return false;
        }
    }

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            i = PlayerGetPropertyInt(player, resource);
            a = amount;
            if( i + a > max ) {
                a = max - i;
            }
            if( i + a < min ) {
                a = min - i;
            }
            if( amount > 0 ) {
                PlayerModifyPropertyInt(player, resource, c_playerPropOperAdd, a);
            } else if(amount < 0) {
                PlayerModifyPropertyInt(player, resource, c_playerPropOperSubtract, -a);
            }
        }
    }
    return true;
}

int get_resource_any_player(int resource) {
    int player;

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            return PlayerGetPropertyInt(player, resource);
        }
    }

    return 0;
}


bool cc_proc_request(int player, string code, string viewer, string params) {
    int iparam;
    int i;

    if(bdebug) {
        notice(viewer + " used " + code + " " + params+" from player "+IntToString(player));
    }
    iparam = StringToInt(params);
    if( code == "nukes" ) {
        return cc_nukes();
    } else if( code == "giveminerals" ) {
        add_resources(c_playerPropMinerals, iparam, 0, 999999, 0);
        notice(viewer+" gave everyone "+IntToString(iparam)+" minerals");
    } else if( code == "givegas") {
        add_resources(c_playerPropVespene, iparam, 0, 999999, 0);
        notice(viewer+" gave everyone "+IntToString(iparam)+" gas");
    } else if( code == "takeminerals") {
        if( add_resources(c_playerPropMinerals, -iparam, iparam, 999999, 1) ) {
            notice(viewer+" took away "+IntToString(iparam)+" minerals from everyone");
        } else {
            notice("no one has enough minerals");
            return false;
        }
    } else if( code == "takegas") {
        if( add_resources(c_playerPropVespene, -iparam, iparam, 999999, 1) ) {
            notice(viewer+" took away "+IntToString(iparam)+" gas from everyone");
        } else {
            notice("no one has enough vespene gas");
            return false;
        }
    } else if( code == "raisesupply") {
        if( add_resources(c_playerPropSuppliesLimit, iparam, 0, 250, 1) ) {
            notice(viewer+" increased the supply limit to "+IntToString(get_resource_any_player(c_playerPropSuppliesLimit)));
        } else {
            notice("supply limit is already at the maximum");
            return false;
        }
    } else if( code == "lowersupply") {
        if( add_resources(c_playerPropSuppliesLimit, -iparam, 50, 9999, 1) ) {
            notice(viewer+" lowered the supply limit to "+IntToString(get_resource_any_player(c_playerPropSuppliesLimit)));
        } else {
            notice("supply limit is already at the minimum");
            return false;
        }
    } else if( code == "superspeed" ) {
        if( GameGetGlobalTimeScale() < 1.5 ) {
            GameSetGlobalTimeScale(1.5);
            notice(viewer+" set the game to super speed");
        } else {
            notice("the game is already at super speed");
            return false;
        }
    } else if( code == "halfspeed" ) {
        if( GameGetGlobalTimeScale() > 0.5 ) {
            GameSetGlobalTimeScale(0.5);
            notice(viewer+" set the game to half speed");
        } else {
            notice("the game is already at half speed");
            return false;
        }
    } else if( code == "killworkers" ) {
        i = 0;
        for(player=1; player<16; player+=1) {
            if( ! PlayerIsActive(player) ) {
                continue;
            }
            i += DeleteUnits("Probe SCV Drone DroneBurrowed", player, -1);
            i += DeleteUnits("MULE", player, 99999);
        }
        if(i <= 0) {
            notice("no one has more than 1 worker");
            return false;
        }
        notice(viewer+" killed "+IntToString(i)+" workers");
    } else if( code == "killarmy" ) {
        // TODO: maybe do a UnitGroup of all units, and then do unit group subtraction with GetUnitsOfTypes("SCV Overlord...")
        return false;
    } else {
        err("unknown crowd control effect");
        return false;
    }
    return true;
}

void cc_read_request(int player) {
    string code;
    string viewer;
    string id;
    string params;

    BankReload(cc_bank[player]);
    BankWait(cc_bank[player]);

    if( BankKeyExists(cc_bank[player], "request", "code") == false ) {
        debug("code doesn't exist");
        return;
    }

    code = BankValueGetAsString(cc_bank[player], "request", "code");
    viewer = BankValueGetAsString(cc_bank[player], "request", "DisplayViewer");
    id = BankValueGetAsString(cc_bank[player], "request", "id");
    params = BankValueGetAsString(cc_bank[player], "request", "params");

    if(id == cc_last_id[player]) {
        return;
    }

    if( cc_proc_request(player, code, viewer, params) ) {
        cc_set_last_id(id, "success", player);
    } else {
        cc_set_last_id(id, "fail", player);
    }
}

bool cc_ticker(bool testConds, bool runActions) {
    int player;

    for(player=1; player<16; player+=1) {
        if( PlayerIsActive(player) ) {
            cc_read_request(player);
        }
    }
    return true;
}

void StartCrowdControl() {
    int player;

    for(player=1; player<16; player+=1) {
        if( ! PlayerIsActive(player) ) {
            continue;
        }

        BankReload(cc_bank[player]);
        BankWait(cc_bank[player]);

        if( BankKeyExists(cc_bank[player], "request", "id") ) {
            cc_last_id[player] = BankValueGetAsString(cc_bank[player], "request", "id");
            cc_set_last_id(cc_last_id[player], "fail", player);
        }

        cc_update_status("playing", player);

        BankReload(cc_bank[player]);
        BankWait(cc_bank[player]);
    }
    debug("StartCrowdControl after waits");

    cc_ticker_trigger = TriggerCreate("cc_ticker");
    TriggerAddEventTimePeriodic(cc_ticker_trigger, 0.5, c_timeReal);
}

bool cc_leave_game(bool testConds, bool runActions) {
    int player;
    player = EventPlayer();
    if(PlayerIsActive(player)) {
        return true;
    }
    cc_update_status("exited", player);
    return true;
}

void init_crowd_control() {
    string date;
    int player;

    for(player=1; player<16; player+=1) {
        if( ! PlayerIsActive(player) ) {
            continue;
        }

        cc_bank[player] = BankLoad("CrowdControl", player);
        cc_responses_bank[player] = BankLoad("CrowdControlResponses", player);
        // loop through and clear all the response sections? or use keys instead of sections?
        BankSectionRemove(cc_responses_bank[player], "header");
        BankSectionCreate(cc_responses_bank[player], "header");
        BankValueSetFromString(cc_responses_bank[player], "header", "version", "0.23");
        cc_set_last_id("", "success", player);
        cc_update_status("starting", player);
    }

    cc_leave_game_trigger = TriggerCreate("cc_leave_game");
    TriggerAddEventPlayerLeft(cc_leave_game_trigger, c_playerAny, c_gameResultUndecided);
}
